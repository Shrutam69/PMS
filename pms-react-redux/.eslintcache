[{"D:\\Practice\\PMS\\pms-react-redux\\src\\index.js":"1","D:\\Practice\\PMS\\pms-react-redux\\src\\components\\Employee\\Employee.jsx":"2","D:\\Practice\\PMS\\pms-react-redux\\src\\reportWebVitals.js":"3","D:\\Practice\\PMS\\pms-react-redux\\src\\components\\Project\\Project.jsx":"4","D:\\Practice\\PMS\\pms-react-redux\\src\\App.js":"5","D:\\Practice\\PMS\\pms-react-redux\\src\\components\\Shared\\Navigation.jsx":"6","D:\\Practice\\PMS\\pms-react-redux\\src\\actions\\store.jsx":"7","D:\\Practice\\PMS\\pms-react-redux\\src\\components\\Shared\\Dashboard.jsx":"8","D:\\Practice\\PMS\\pms-react-redux\\src\\utils\\constatnts.js":"9","D:\\Practice\\PMS\\pms-react-redux\\src\\actions\\api.jsx":"10","D:\\Practice\\PMS\\pms-react-redux\\src\\actions\\employee.js":"11","D:\\Practice\\PMS\\pms-react-redux\\src\\actions\\project.js":"12","D:\\Practice\\PMS\\pms-react-redux\\src\\reducers\\project.js":"13","D:\\Practice\\PMS\\pms-react-redux\\src\\reducers\\combine.jsx":"14","D:\\Practice\\PMS\\pms-react-redux\\src\\components\\Employee\\EmployeeForm.jsx":"15","D:\\Practice\\PMS\\pms-react-redux\\src\\components\\Shared\\Popup.js":"16","D:\\Practice\\PMS\\pms-react-redux\\src\\components\\Shared\\ConfirmDialog.js":"17","D:\\Practice\\PMS\\pms-react-redux\\src\\reducers\\employee.js":"18","D:\\Practice\\PMS\\pms-react-redux\\src\\components\\Shared\\TextError.jsx":"19"},{"size":500,"mtime":1608790967593,"results":"20","hashOfConfig":"21"},{"size":4919,"mtime":1610453497142,"results":"22","hashOfConfig":"21"},{"size":362,"mtime":1608790967593,"results":"23","hashOfConfig":"21"},{"size":116,"mtime":1610347975774,"results":"24","hashOfConfig":"21"},{"size":608,"mtime":1610371086607,"results":"25","hashOfConfig":"21"},{"size":3408,"mtime":1610449302863,"results":"26","hashOfConfig":"21"},{"size":329,"mtime":1610359486290,"results":"27","hashOfConfig":"21"},{"size":122,"mtime":1610356286587,"results":"28","hashOfConfig":"21"},{"size":684,"mtime":1610363659120,"results":"29","hashOfConfig":"21"},{"size":421,"mtime":1610358340074,"results":"30","hashOfConfig":"21"},{"size":1497,"mtime":1610359550627,"results":"31","hashOfConfig":"21"},{"size":1592,"mtime":1610359620928,"results":"32","hashOfConfig":"21"},{"size":845,"mtime":1610362494968,"results":"33","hashOfConfig":"21"},{"size":243,"mtime":1610362528691,"results":"34","hashOfConfig":"21"},{"size":7475,"mtime":1610458412306,"results":"35","hashOfConfig":"21"},{"size":1272,"mtime":1610458153269,"results":"36","hashOfConfig":"21"},{"size":1851,"mtime":1610369723391,"results":"37","hashOfConfig":"21"},{"size":818,"mtime":1610359308963,"results":"38","hashOfConfig":"21"},{"size":154,"mtime":1610450177037,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1u1uxhr",{"filePath":"42","messages":"43","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Practice\\PMS\\pms-react-redux\\src\\index.js",[],"D:\\Practice\\PMS\\pms-react-redux\\src\\components\\Employee\\Employee.jsx",["84","85","86"],"import React, { useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Table } from 'antd';\r\nimport {\r\n  ButtonGroup,\r\n  Button,\r\n  Toolbar,\r\n  TextField,\r\n  InputAdornment,\r\n} from '@material-ui/core';\r\nimport { tableHeaders } from '../../utils/constatnts';\r\nimport * as actions from '../../actions/employee';\r\nimport { UserAddOutlined } from '@ant-design/icons';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport './employee.css';\r\nimport Search from '@material-ui/icons/Search';\r\nimport Popup from '../Shared/Popup';\r\nimport EmployeeForm from './EmployeeForm';\r\nimport ConfirmDialog from '../Shared/ConfirmDialog';\r\nimport { useToasts } from 'react-toast-notifications';\r\n\r\nconst Employee = () => {\r\n  const { addToast } = useToasts();\r\n  const [employee, setEmployee] = useState([]);\r\n  const [openPopup, setOpenPopup] = useState(false);\r\n  const [confirmDialog, setConfirmDialog] = useState({\r\n    isOpen: false,\r\n    title: '',\r\n    subTitle: '',\r\n  });\r\n  const employeeState = useSelector((state) => state.employeeReducer.list);\r\n  const dispatch = useDispatch();\r\n  const getEmployeeList = () => {\r\n    dispatch(actions.fetchAll());\r\n  };\r\n  useEffect(() => {\r\n    getEmployeeList();\r\n  }, []);\r\n  const openInPopup = (item) => {\r\n    //  setRecordForEdit(item);\r\n    setOpenPopup(true);\r\n  };\r\n\r\n  const onDelete = (id) => {\r\n    setConfirmDialog({\r\n      ...confirmDialog,\r\n      isOpen: false,\r\n    });\r\n    dispatch(\r\n      actions.Delete(id, () =>\r\n        addToast('Deleted Successfully', { appearance: 'info' })\r\n      )\r\n    );\r\n    // getEmployeeList();\r\n  };\r\n  const actionColumn = {\r\n    title: 'Actions',\r\n    dataIndex: '',\r\n    key: 'actions',\r\n    render: (employee) => (\r\n      <ButtonGroup variant=\"text\">\r\n        <Button\r\n          onClick={() => {\r\n            openInPopup(employee);\r\n          }}\r\n        >\r\n          <EditIcon color=\"primary\" />\r\n        </Button>\r\n        <Button\r\n          onClick={() => {\r\n            setConfirmDialog({\r\n              isOpen: true,\r\n              title: 'Are you sure to delete employee?',\r\n              subTitle: \"You can't undo this operation\",\r\n              onConfirm: () => {\r\n                onDelete(employee.id);\r\n              },\r\n            });\r\n          }}\r\n        >\r\n          <DeleteIcon color=\"secondary\" />\r\n        </Button>\r\n      </ButtonGroup>\r\n    ),\r\n  };\r\n  const columns = [...tableHeaders, actionColumn];\r\n  return (\r\n    <>\r\n      <div className=\"row d-flex justify-content-between\">\r\n        <div>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            size=\"small\"\r\n            className=\"ml-3 mt-2\"\r\n            style={{\r\n              height: '56px',\r\n              width: '100%',\r\n              backgroundColor: '#001529',\r\n            }}\r\n            onClick={() => {\r\n              setOpenPopup(true);\r\n              // setRecordForEdit(null);\r\n            }}\r\n          >\r\n            <UserAddOutlined\r\n              style={{\r\n                fontSize: '22px',\r\n              }}\r\n            />\r\n            <span style={{ fontSize: '15px' }} className=\"ml-2\">\r\n              Add Employee\r\n            </span>\r\n          </Button>\r\n        </div>\r\n        <div className=\"d-flex mt-2 mt-md-0\">\r\n          <div style={{ width: '100%' }} className=\"ml-2 mt-1 ml-md-0 mt-md-0\">\r\n            <Toolbar className=\"mt-1 pr-3\">\r\n              <TextField\r\n                fullWidth\r\n                label=\"Search\"\r\n                variant=\"outlined\"\r\n                InputProps={{\r\n                  startAdornment: (\r\n                    <InputAdornment position=\"start\">\r\n                      <Search />\r\n                    </InputAdornment>\r\n                  ),\r\n                }}\r\n                onChange={(e) => {\r\n                  // setSearchInput(e.target.value);\r\n                }}\r\n              />\r\n            </Toolbar>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"border\">\r\n        <Table\r\n          key={employeeState.Id}\r\n          columns={columns}\r\n          dataSource={employeeState}\r\n          pagination={{\r\n            defaultPageSize: 5,\r\n            showSizeChanger: true,\r\n            pageSizeOptions: ['5', '10', '15'],\r\n            showQuickJumper: true,\r\n          }}\r\n          className=\"table-responsive\"\r\n        />\r\n      </div>\r\n      <Popup\r\n        title=\"Employee Form\"\r\n        openPopup={openPopup}\r\n        setOpenPopup={setOpenPopup}\r\n      >\r\n        <EmployeeForm\r\n          //  recordForEdit={recordForEdit} addOrEdit={addOrEdit}\r\n          openPopup={openPopup}\r\n          setOpenPopup={setOpenPopup}\r\n        />\r\n      </Popup>\r\n      <ConfirmDialog\r\n        confirmDialog={confirmDialog}\r\n        setConfirmDialog={setConfirmDialog}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Employee;\r\n",["87","88"],"D:\\Practice\\PMS\\pms-react-redux\\src\\reportWebVitals.js",[],"D:\\Practice\\PMS\\pms-react-redux\\src\\components\\Project\\Project.jsx",[],["89","90"],"D:\\Practice\\PMS\\pms-react-redux\\src\\App.js",["91","92"],"D:\\Practice\\PMS\\pms-react-redux\\src\\components\\Shared\\Navigation.jsx",["93","94"],"D:\\Practice\\PMS\\pms-react-redux\\src\\actions\\store.jsx",[],"D:\\Practice\\PMS\\pms-react-redux\\src\\components\\Shared\\Dashboard.jsx",[],"D:\\Practice\\PMS\\pms-react-redux\\src\\utils\\constatnts.js",[],["95","96"],"D:\\Practice\\PMS\\pms-react-redux\\src\\actions\\api.jsx",["97"],"import axios from 'axios';\r\nimport { BASE_URL } from '../utils/constatnts';\r\n\r\nexport default {\r\n  actions(url = BASE_URL) {\r\n    return {\r\n      fetchAll: () => axios.get(url),\r\n      fetchById: (id) => axios.get(url + id),\r\n      create: (newRecord) => axios.post(url, newRecord),\r\n      update: (id, updateRecord) => axios.put(url + id, updateRecord),\r\n      delete: (id) => axios.delete(url + id),\r\n    };\r\n  },\r\n};\r\n","D:\\Practice\\PMS\\pms-react-redux\\src\\actions\\employee.js",[],"D:\\Practice\\PMS\\pms-react-redux\\src\\actions\\project.js",[],"D:\\Practice\\PMS\\pms-react-redux\\src\\reducers\\project.js",[],"D:\\Practice\\PMS\\pms-react-redux\\src\\reducers\\combine.jsx",[],"D:\\Practice\\PMS\\pms-react-redux\\src\\components\\Employee\\EmployeeForm.jsx",["98","99","100","101","102"],"import React, { useState, useEffect } from 'react';\r\nimport { Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport FormikControl from '../Shared/FormikControl';\r\nimport { Button } from '@material-ui/core';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport './employee.css';\r\nimport DatePicker from 'react-datepicker';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\nimport { Multiselect } from 'multiselect-react-dropdown';\r\n\r\nconst EmployeeForm = (props) => {\r\n  const { addOrEdit, recordForEdit, openPopup, setOpenPopup } = props;\r\n  const initialFieldValues = {\r\n    id: 0,\r\n    name: '',\r\n    code: '',\r\n    startDate: '',\r\n    releaseDate: '',\r\n    userType: '',\r\n    userTypeId: [],\r\n  };\r\n  const plainArray = [\r\n    'Option 1',\r\n    'Option 2',\r\n    'Option 3',\r\n    'Option 4',\r\n    'Option 5',\r\n  ];\r\n  const [values, setValues] = useState(initialFieldValues);\r\n  const [startDate, setStartDate] = useState(new Date());\r\n  const [endDate, setEndDate] = useState();\r\n  const [siklls, setsiklls] = useState(plainArray);\r\n  //Validation\r\n  const validationSchema = Yup.object({\r\n    name: Yup.string()\r\n      .trim()\r\n      .required('This field is required')\r\n      .matches()\r\n      .min(3, 'Mininum 3 characters allowed')\r\n      .max(15, 'Maximum 15 characters allowed'),\r\n    code: Yup.string()\r\n      .trim()\r\n      .email('Invalid email format')\r\n      .required('This field is required'),\r\n    userType: Yup.string().required('Please select one option'),\r\n    startDate: Yup.string().required('This field is required'),\r\n    releaseDate: Yup.string().required('This field is required'),\r\n  });\r\n  useEffect(() => {\r\n    if (recordForEdit != null)\r\n      setValues({\r\n        ...recordForEdit,\r\n      });\r\n    else {\r\n      setValues({\r\n        ...initialFieldValues,\r\n      });\r\n    }\r\n  }, [recordForEdit]);\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setValues({\r\n      ...values,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  //Submit Event\r\n  const onSubmit = (values) => {};\r\n  return (\r\n    <div>\r\n      <div className=\"p-2\">\r\n        <div>\r\n          <Formik\r\n            initialValues={values}\r\n            validationSchema={validationSchema}\r\n            onSubmit={onSubmit}\r\n            enableReinitialize\r\n          >\r\n            {({ errors, touched }) => {\r\n              return (\r\n                <Form autoComplete=\"off\" noValidate>\r\n                  <div className=\"row\">\r\n                    <div className=\"col-sm-3 d-flex justify-content-sm-start justify-content-md-end pt-1 pr-0\">\r\n                      <label>\r\n                        Name <span className=\"text-danger\">*</span>\r\n                      </label>\r\n                    </div>\r\n                    <div className=\"col-sm-9\">\r\n                      <FormikControl\r\n                        control=\"input\"\r\n                        type=\"text\"\r\n                        name=\"name\"\r\n                        className={\r\n                          errors.name && touched.name ? 'err-field' : 'field'\r\n                        }\r\n                        onKeyDown={(e) =>\r\n                          e.keyCode > 48 && e.keyCode < 57 && e.preventDefault()\r\n                        }\r\n                        value={values.firstName}\r\n                        onChange={handleInputChange}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"row mt-3\">\r\n                    <div className=\"col-sm-3 d-flex justify-content-sm-start justify-content-md-end pt-1 pr-0\">\r\n                      <label>\r\n                        Code<span className=\"text-danger\">*</span>\r\n                      </label>\r\n                    </div>\r\n                    <div className=\"col-sm-9\">\r\n                      <FormikControl\r\n                        control=\"input\"\r\n                        type=\"text\"\r\n                        name=\"code\"\r\n                        className={\r\n                          errors.name && touched.name ? 'err-field' : 'field'\r\n                        }\r\n                        value={values.code}\r\n                        onChange={handleInputChange}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"row mt-3\">\r\n                    <div className=\"col-sm-3 d-flex justify-content-sm-start justify-content-md-end pt-1 pr-0\">\r\n                      <label>\r\n                        Start Date<span className=\"text-danger\">*</span>\r\n                      </label>\r\n                    </div>\r\n                    <div className=\"col-sm-9\">\r\n                      <DatePicker\r\n                        selected={startDate}\r\n                        onChange={(date) => setStartDate(date)}\r\n                        isClearable\r\n                        placeholderText=\" select date!\"\r\n                        className=\"field\"\r\n                        style={{ width: '100%' }}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"row mt-3\">\r\n                    <div className=\"col-sm-3 d-flex justify-content-sm-start justify-content-md-end pt-1 pr-0\">\r\n                      <label>\r\n                        End Date<span className=\"text-danger\">*</span>\r\n                      </label>\r\n                    </div>\r\n                    <div className=\"col-sm-9\">\r\n                      <DatePicker\r\n                        selected={endDate}\r\n                        onChange={(date) => setEndDate(date)}\r\n                        isClearable\r\n                        placeholderText=\" select date!\"\r\n                        className=\"field\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"row mt-3\">\r\n                    <div className=\"col-sm-3 d-flex justify-content-sm-start justify-content-md-end pt-1 pr-0\">\r\n                      <label>\r\n                        Skills<span className=\"text-danger\">*</span>\r\n                      </label>\r\n                    </div>\r\n                    <div className=\"col-sm-9\">\r\n                      <Multiselect options={plainArray} isObject={false} />\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"d-flex justify-content-end mt-3\">\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      startIcon={<SaveIcon />}\r\n                      style={{ padding: '6px 12px' }}\r\n                      className=\"btn-save\"\r\n                      type=\"submit\"\r\n                    >\r\n                      Save\r\n                    </Button>\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      startIcon={<CloseIcon />}\r\n                      className=\"btn-cancel ml-2\"\r\n                      style={{ padding: '6px 12px' }}\r\n                      onClick={() => {\r\n                        setOpenPopup(false);\r\n                        // setRecordForEdit(null);\r\n                      }}\r\n                    >\r\n                      Cancel\r\n                    </Button>\r\n                  </div>\r\n                </Form>\r\n              );\r\n            }}\r\n          </Formik>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EmployeeForm;\r\n","D:\\Practice\\PMS\\pms-react-redux\\src\\components\\Shared\\Popup.js",["103","104","105"],"D:\\Practice\\PMS\\pms-react-redux\\src\\components\\Shared\\ConfirmDialog.js",[],"D:\\Practice\\PMS\\pms-react-redux\\src\\reducers\\employee.js",[],"D:\\Practice\\PMS\\pms-react-redux\\src\\components\\Shared\\TextError.jsx",[],{"ruleId":"106","severity":1,"message":"107","line":25,"column":10,"nodeType":"108","messageId":"109","endLine":25,"endColumn":18},{"ruleId":"106","severity":1,"message":"110","line":25,"column":20,"nodeType":"108","messageId":"109","endLine":25,"endColumn":31},{"ruleId":"111","severity":1,"message":"112","line":39,"column":6,"nodeType":"113","endLine":39,"endColumn":8,"suggestions":"114"},{"ruleId":"115","replacedBy":"116"},{"ruleId":"117","replacedBy":"118"},{"ruleId":"115","replacedBy":"119"},{"ruleId":"117","replacedBy":"120"},{"ruleId":"106","severity":1,"message":"121","line":1,"column":8,"nodeType":"108","messageId":"109","endLine":1,"endColumn":16},{"ruleId":"106","severity":1,"message":"122","line":2,"column":8,"nodeType":"108","messageId":"109","endLine":2,"endColumn":15},{"ruleId":"106","severity":1,"message":"123","line":5,"column":3,"nodeType":"108","messageId":"109","endLine":5,"endColumn":7},{"ruleId":"124","severity":1,"message":"125","line":63,"column":19,"nodeType":"126","endLine":63,"endColumn":68},{"ruleId":"115","replacedBy":"127"},{"ruleId":"117","replacedBy":"128"},{"ruleId":"129","severity":1,"message":"130","line":4,"column":1,"nodeType":"131","endLine":14,"endColumn":3},{"ruleId":"106","severity":1,"message":"132","line":14,"column":11,"nodeType":"108","messageId":"109","endLine":14,"endColumn":20},{"ruleId":"106","severity":1,"message":"133","line":14,"column":37,"nodeType":"108","messageId":"109","endLine":14,"endColumn":46},{"ruleId":"106","severity":1,"message":"134","line":34,"column":10,"nodeType":"108","messageId":"109","endLine":34,"endColumn":16},{"ruleId":"106","severity":1,"message":"135","line":34,"column":18,"nodeType":"108","messageId":"109","endLine":34,"endColumn":27},{"ruleId":"111","severity":1,"message":"136","line":61,"column":6,"nodeType":"113","endLine":61,"endColumn":21,"suggestions":"137"},{"ruleId":"106","severity":1,"message":"138","line":6,"column":11,"nodeType":"108","messageId":"109","endLine":6,"endColumn":16},{"ruleId":"106","severity":1,"message":"139","line":7,"column":20,"nodeType":"108","messageId":"109","endLine":7,"endColumn":31},{"ruleId":"106","severity":1,"message":"140","line":8,"column":21,"nodeType":"108","messageId":"109","endLine":8,"endColumn":33},"no-unused-vars","'employee' is assigned a value but never used.","Identifier","unusedVar","'setEmployee' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getEmployeeList'. Either include it or remove the dependency array.","ArrayExpression",["141"],"no-native-reassign",["142"],"no-negated-in-lhs",["143"],["142"],["143"],"'Employee' is defined but never used.","'Project' is defined but never used.","'Link' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["142"],["143"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'addOrEdit' is assigned a value but never used.","'openPopup' is assigned a value but never used.","'siklls' is assigned a value but never used.","'setsiklls' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'initialFieldValues'. Either include it or remove the dependency array.",["144"],"'title' is assigned a value but never used.","'setMaxWidth' is assigned a value but never used.","'setFullWidth' is assigned a value but never used.",{"desc":"145","fix":"146"},"no-global-assign","no-unsafe-negation",{"desc":"147","fix":"148"},"Update the dependencies array to be: [getEmployeeList]",{"range":"149","text":"150"},"Update the dependencies array to be: [initialFieldValues, recordForEdit]",{"range":"151","text":"152"},[1307,1309],"[getEmployeeList]",[1884,1899],"[initialFieldValues, recordForEdit]"]
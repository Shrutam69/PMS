[{"D:\\Practice\\PMS\\pms-react-redux\\src\\index.js":"1","D:\\Practice\\PMS\\pms-react-redux\\src\\components\\Employee\\Employee.jsx":"2","D:\\Practice\\PMS\\pms-react-redux\\src\\reportWebVitals.js":"3","D:\\Practice\\PMS\\pms-react-redux\\src\\components\\Project\\Project.jsx":"4","D:\\Practice\\PMS\\pms-react-redux\\src\\App.js":"5","D:\\Practice\\PMS\\pms-react-redux\\src\\components\\Shared\\Navigation.jsx":"6","D:\\Practice\\PMS\\pms-react-redux\\src\\actions\\store.jsx":"7","D:\\Practice\\PMS\\pms-react-redux\\src\\components\\Shared\\Dashboard.jsx":"8","D:\\Practice\\PMS\\pms-react-redux\\src\\utils\\constatnts.js":"9","D:\\Practice\\PMS\\pms-react-redux\\src\\actions\\api.jsx":"10","D:\\Practice\\PMS\\pms-react-redux\\src\\actions\\employee.js":"11","D:\\Practice\\PMS\\pms-react-redux\\src\\actions\\project.js":"12","D:\\Practice\\PMS\\pms-react-redux\\src\\reducers\\project.js":"13","D:\\Practice\\PMS\\pms-react-redux\\src\\reducers\\combine.jsx":"14","D:\\Practice\\PMS\\pms-react-redux\\src\\components\\Employee\\EmployeeForm.jsx":"15","D:\\Practice\\PMS\\pms-react-redux\\src\\components\\Shared\\Popup.js":"16","D:\\Practice\\PMS\\pms-react-redux\\src\\components\\Shared\\ConfirmDialog.js":"17","D:\\Practice\\PMS\\pms-react-redux\\src\\reducers\\employee.js":"18","D:\\Practice\\PMS\\pms-react-redux\\src\\components\\Shared\\TextError.jsx":"19","D:\\Practice\\PMS\\pms-react-redux\\src\\components\\Shared\\FormikControl.jsx":"20","D:\\Practice\\PMS\\pms-react-redux\\src\\components\\Shared\\DatePicker.jsx":"21","D:\\Practice\\PMS\\pms-react-redux\\src\\actions\\skills.js":"22","D:\\Practice\\PMS\\pms-react-redux\\src\\reducers\\skills.js":"23","D:\\Practice\\PMS\\pms-react-redux\\src\\components\\Shared\\Select.jsx":"24","D:\\Practice\\PMS\\pms-react-redux\\src\\components\\Project\\ProjectForm.jsx":"25","D:\\Practice\\PMS\\pms-react-redux\\src\\utils\\data.js":"26","D:\\Practice\\PMS\\pms-react-redux\\src\\components\\Shared\\Input.jsx":"27","D:\\Practice\\PMS\\pms-react-redux\\src\\components\\Employee\\AssignProjectToEmployee.jsx":"28","D:\\Practice\\PMS\\pms-react-redux\\src\\components\\Project\\AssignEmployeeToPRoject.jsx":"29","D:\\Practice\\PMS\\pms-react-redux\\src\\components\\Project\\AssignEmployeeToProject.jsx":"30","D:\\Practice\\PMS\\pms-react-redux\\src\\reducers\\assignProject.js":"31","D:\\Practice\\PMS\\pms-react-redux\\src\\actions\\employeeSkill.js":"32","D:\\Practice\\PMS\\pms-react-redux\\src\\actions\\projectTech.js":"33","D:\\Practice\\PMS\\pms-react-redux\\src\\actions\\assignProject.js":"34"},{"size":504,"mtime":1611302307945,"results":"35","hashOfConfig":"36"},{"size":8037,"mtime":1611730487921,"results":"37","hashOfConfig":"36"},{"size":362,"mtime":1608790967593,"results":"38","hashOfConfig":"36"},{"size":7918,"mtime":1611730629879,"results":"39","hashOfConfig":"36"},{"size":608,"mtime":1610371086607,"results":"40","hashOfConfig":"36"},{"size":3411,"mtime":1610971723840,"results":"41","hashOfConfig":"36"},{"size":329,"mtime":1610359486290,"results":"42","hashOfConfig":"36"},{"size":11140,"mtime":1611725711345,"results":"43","hashOfConfig":"36"},{"size":397,"mtime":1611406723040,"results":"44","hashOfConfig":"36"},{"size":421,"mtime":1610358340074,"results":"45","hashOfConfig":"36"},{"size":1469,"mtime":1611552217087,"results":"46","hashOfConfig":"36"},{"size":1583,"mtime":1610946853027,"results":"47","hashOfConfig":"36"},{"size":831,"mtime":1611560266175,"results":"48","hashOfConfig":"36"},{"size":584,"mtime":1611406873764,"results":"49","hashOfConfig":"36"},{"size":9617,"mtime":1611733045811,"results":"50","hashOfConfig":"36"},{"size":1266,"mtime":1610975897686,"results":"51","hashOfConfig":"36"},{"size":1851,"mtime":1610957237470,"results":"52","hashOfConfig":"36"},{"size":799,"mtime":1611552526220,"results":"53","hashOfConfig":"36"},{"size":154,"mtime":1610450177037,"results":"54","hashOfConfig":"36"},{"size":469,"mtime":1610515345380,"results":"55","hashOfConfig":"36"},{"size":915,"mtime":1611575409634,"results":"56","hashOfConfig":"36"},{"size":1557,"mtime":1610949257306,"results":"57","hashOfConfig":"36"},{"size":820,"mtime":1610862276004,"results":"58","hashOfConfig":"36"},{"size":754,"mtime":1610527110209,"results":"59","hashOfConfig":"36"},{"size":9129,"mtime":1611730953963,"results":"60","hashOfConfig":"36"},{"size":2439,"mtime":1611725678473,"results":"61","hashOfConfig":"36"},{"size":432,"mtime":1610450147481,"results":"62","hashOfConfig":"36"},{"size":5377,"mtime":1611733121099,"results":"63","hashOfConfig":"36"},{"size":7542,"mtime":1611221898465,"results":"64","hashOfConfig":"36"},{"size":5403,"mtime":1611730895538,"results":"65","hashOfConfig":"36"},{"size":871,"mtime":1611225886579,"results":"66","hashOfConfig":"36"},{"size":561,"mtime":1611316714630,"results":"67","hashOfConfig":"36"},{"size":551,"mtime":1611549778643,"results":"68","hashOfConfig":"36"},{"size":1682,"mtime":1611225754459,"results":"69","hashOfConfig":"36"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1u1uxhr",{"filePath":"72","messages":"73","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"84"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"88"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"99"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"132","messages":"133","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141"},{"filePath":"142","messages":"143","errorCount":10,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"144","messages":"145","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Practice\\PMS\\pms-react-redux\\src\\index.js",[],"D:\\Practice\\PMS\\pms-react-redux\\src\\components\\Employee\\Employee.jsx",["155","156","157","158"],"import React, { useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Table } from 'antd';\r\nimport {\r\n  ButtonGroup,\r\n  Button,\r\n  Toolbar,\r\n  TextField,\r\n  InputAdornment,\r\n  Tooltip,\r\n  IconButton,\r\n} from '@material-ui/core';\r\nimport { tableHeaders } from '../../utils/data';\r\nimport * as actions from '../../actions/employee';\r\nimport * as projectActions from '../../actions/project';\r\nimport * as assignProjectActions from '../../actions/assignProject';\r\nimport { UserAddOutlined } from '@ant-design/icons';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport './employee.css';\r\nimport Search from '@material-ui/icons/Search';\r\nimport Popup from '../Shared/Popup';\r\nimport EmployeeForm from './EmployeeForm';\r\nimport ConfirmDialog from '../Shared/ConfirmDialog';\r\nimport { useToasts } from 'react-toast-notifications';\r\nimport * as skillsactions from '../../actions/skills';\r\nimport AssignProjectToEmployee from './AssignProjectToEmployee';\r\nimport ViewListIcon from '@material-ui/icons/ViewList';\r\n\r\nconst Employee = () => {\r\n  const { addToast } = useToasts();\r\n  const dispatch = useDispatch();\r\n  const [openPopup, setOpenPopup] = useState(false);\r\n  const [assignPopup, setassignPopup] = useState(false);\r\n  const [recordForEdit, setRecordForEdit] = useState({});\r\n  const [searchInput, setSearchInput] = useState('');\r\n  const [confirmDialog, setConfirmDialog] = useState({\r\n    isOpen: false,\r\n    title: '',\r\n    subTitle: '',\r\n  });\r\n  const getAssignProject = () => {\r\n    dispatch(assignProjectActions.fetchAll());\r\n  };\r\n  useEffect(() => {\r\n    getAssignProject();\r\n  }, []);\r\n  const assignProjectState = useSelector(\r\n    (state) => state.assignProjectReducer.list\r\n  );\r\n  const getProjectList = () => {\r\n    dispatch(projectActions.fetchAll());\r\n  };\r\n  useEffect(() => {\r\n    getProjectList();\r\n  }, []);\r\n  const projectState = useSelector((state) => state.projectReducer.list);\r\n  const getSkillsList = () => {\r\n    dispatch(skillsactions.fetchAll());\r\n  };\r\n  useEffect(() => {\r\n    getSkillsList();\r\n  }, []);\r\n  const skillsState = useSelector((state) => state.skillsReducer.list);\r\n  const getEmployeeList = () => {\r\n    dispatch(actions.fetchAll());\r\n  };\r\n  useEffect(() => {\r\n    getEmployeeList();\r\n  }, [assignProjectState]);\r\n  const employeeState = useSelector((state) => state.employeeReducer.list);\r\n  const [searchResult, setSearchResult] = useState([...employeeState]);\r\n  useEffect(() => {\r\n    let dataAfterFilter = searchInput\r\n      ? employeeState.filter(\r\n          (x) =>\r\n            x.name.toLowerCase().includes(searchInput.toLowerCase()) ||\r\n            x.code.toLowerCase().includes(searchInput.toLowerCase()) ||\r\n            x.startDate.toLowerCase().includes(searchInput.toLowerCase()) ||\r\n            x.releaseDate.toLowerCase().includes(searchInput.toLowerCase())\r\n        )\r\n      : employeeState;\r\n    for (let i = 0; i < dataAfterFilter.length; i++) {\r\n      dataAfterFilter[i].startDate = new Date(\r\n        dataAfterFilter[i].startDate\r\n      ).toLocaleDateString();\r\n      dataAfterFilter[i].releaseDate = new Date(\r\n        dataAfterFilter[i].releaseDate\r\n      ).toLocaleDateString();\r\n    }\r\n    setSearchResult(dataAfterFilter);\r\n  }, [searchInput, employeeState]);\r\n  const openInPopup = (item) => {\r\n    setRecordForEdit(item);\r\n    setOpenPopup(true);\r\n  };\r\n  const onDelete = (id) => {\r\n    setConfirmDialog({\r\n      ...confirmDialog,\r\n      isOpen: false,\r\n    });\r\n    dispatch(\r\n      actions.Delete(id, () =>\r\n        addToast('Deleted Successfully', { appearance: 'info' })\r\n      )\r\n    );\r\n    getEmployeeList();\r\n    setSearchResult(employeeState);\r\n  };\r\n  const actionColumn = {\r\n    title: 'Actions',\r\n    dataIndex: '',\r\n    key: 'actions',\r\n    render: (employee) => (\r\n      <ButtonGroup variant=\"text\">\r\n        <Tooltip title=\"Edit\">\r\n          <IconButton\r\n            aria-label=\"edit\"\r\n            onClick={() => {\r\n              setassignPopup(false);\r\n              openInPopup(employee);\r\n            }}\r\n          >\r\n            <EditIcon color=\"primary\" />\r\n          </IconButton>\r\n        </Tooltip>\r\n        <Tooltip title=\"Delete\">\r\n          <IconButton aria-label=\"delete\">\r\n            <DeleteIcon\r\n              color=\"secondary\"\r\n              onClick={() => {\r\n                setConfirmDialog({\r\n                  isOpen: true,\r\n                  title: 'Are you sure to delete employee?',\r\n                  subTitle: \"You can't undo this operation\",\r\n                  onConfirm: () => {\r\n                    onDelete(employee.id);\r\n                  },\r\n                });\r\n              }}\r\n            />\r\n          </IconButton>\r\n        </Tooltip>\r\n        <Tooltip title=\"Assign Projects\">\r\n          <IconButton aria-label=\"viewProjects\">\r\n            <ViewListIcon\r\n              color=\"default\"\r\n              onClick={() => {\r\n                setassignPopup(true);\r\n                openInPopup(employee);\r\n              }}\r\n            />\r\n          </IconButton>\r\n        </Tooltip>\r\n      </ButtonGroup>\r\n    ),\r\n  };\r\n  const columns = [...tableHeaders, actionColumn];\r\n  return (\r\n    <>\r\n      <div className=\"row d-flex justify-content-between\">\r\n        <div>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            size=\"small\"\r\n            className=\"ml-3 mt-2\"\r\n            style={{\r\n              height: '56px',\r\n              width: '100%',\r\n              backgroundColor: '#001529',\r\n            }}\r\n            onClick={() => {\r\n              setOpenPopup(true);\r\n              setRecordForEdit(null);\r\n            }}\r\n          >\r\n            <UserAddOutlined\r\n              style={{\r\n                fontSize: '22px',\r\n              }}\r\n            />\r\n            <span style={{ fontSize: '15px' }} className=\"ml-2\">\r\n              Add Employee\r\n            </span>\r\n          </Button>\r\n        </div>\r\n        <div className=\"d-flex mt-2 mt-md-0\">\r\n          <div style={{ width: '100%' }} className=\"ml-2 mt-1 ml-md-0 mt-md-0\">\r\n            <Toolbar className=\"mt-1 pr-3\">\r\n              <TextField\r\n                fullWidth\r\n                label=\"Search(Name,Code,StartDate,ReleaseDate)\"\r\n                variant=\"outlined\"\r\n                InputProps={{\r\n                  startAdornment: (\r\n                    <InputAdornment position=\"start\">\r\n                      <Search />\r\n                    </InputAdornment>\r\n                  ),\r\n                }}\r\n                onChange={(e) => {\r\n                  setSearchInput(e.target.value);\r\n                }}\r\n              />\r\n            </Toolbar>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"border\">\r\n        <Table\r\n          columns={columns}\r\n          dataSource={searchResult}\r\n          pagination={{\r\n            defaultPageSize: 5,\r\n            showSizeChanger: true,\r\n            pageSizeOptions: ['5', '10', '15'],\r\n            showQuickJumper: true,\r\n          }}\r\n          className=\"table-responsive\"\r\n        />\r\n      </div>\r\n      <Popup\r\n        title={assignPopup ? 'Assign Project' : 'Employee Form'}\r\n        openPopup={openPopup}\r\n        setOpenPopup={setOpenPopup}\r\n      >\r\n        {assignPopup ? (\r\n          <div>\r\n            <AssignProjectToEmployee\r\n              recordForEdit={recordForEdit}\r\n              setOpenPopup={setOpenPopup}\r\n              projectState={projectState}\r\n            />\r\n          </div>\r\n        ) : (\r\n          <div>\r\n            <EmployeeForm\r\n              recordForEdit={recordForEdit}\r\n              setOpenPopup={setOpenPopup}\r\n              skillsState={skillsState}\r\n              getEmployeeList={getEmployeeList}\r\n              setRecordForEdit={setRecordForEdit}\r\n            />\r\n          </div>\r\n        )}\r\n      </Popup>\r\n      <ConfirmDialog\r\n        confirmDialog={confirmDialog}\r\n        setConfirmDialog={setConfirmDialog}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Employee;\r\n","D:\\Practice\\PMS\\pms-react-redux\\src\\reportWebVitals.js",[],["159","160"],"D:\\Practice\\PMS\\pms-react-redux\\src\\components\\Project\\Project.jsx",["161","162","163","164","165","166"],"import React, { useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Table } from 'antd';\r\nimport {\r\n  ButtonGroup,\r\n  Button,\r\n  Toolbar,\r\n  TextField,\r\n  InputAdornment,\r\n  Tooltip,\r\n  IconButton,\r\n} from '@material-ui/core';\r\nimport { tableHeadersProject } from '../../utils/data';\r\nimport * as actions from '../../actions/project';\r\nimport * as employeeActions from '../../actions/employee';\r\nimport * as skillsactions from '../../actions/skills';\r\nimport * as assignProjectActions from '../../actions/assignProject';\r\nimport { UserAddOutlined } from '@ant-design/icons';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport Search from '@material-ui/icons/Search';\r\nimport Popup from '../Shared/Popup';\r\nimport ProjectForm from './ProjectForm';\r\nimport ConfirmDialog from '../Shared/ConfirmDialog';\r\nimport { useToasts } from 'react-toast-notifications';\r\nimport ViewListIcon from '@material-ui/icons/ViewList';\r\nimport AssignEmployeeToProject from './AssignEmployeeToProject';\r\nimport '../Employee/employee.css';\r\nimport moment from 'moment';\r\n\r\nconst Project = () => {\r\n  const { addToast } = useToasts();\r\n  const [openPopup, setOpenPopup] = useState(false);\r\n  const [recordForEdit, setRecordForEdit] = useState(null);\r\n  const [assignEmployee, setAssignEmployee] = useState(false);\r\n  const [searchInput, setSearchInput] = useState('');\r\n  const [confirmDialog, setConfirmDialog] = useState({\r\n    isOpen: false,\r\n    title: '',\r\n    subTitle: '',\r\n  });\r\n\r\n  const dispatch = useDispatch();\r\n  const getAssignProject = () => {\r\n    dispatch(assignProjectActions.fetchAll());\r\n  };\r\n  useEffect(() => {\r\n    getAssignProject();\r\n  }, []);\r\n  const assignProjectState = useSelector(\r\n    (state) => state.assignProjectReducer.list\r\n  );\r\n  const getEmployeeList = () => {\r\n    dispatch(employeeActions.fetchAll());\r\n  };\r\n  useEffect(() => {\r\n    getEmployeeList();\r\n  }, []);\r\n  const employeeState = useSelector((state) => state.employeeReducer.list);\r\n  const getSkillsList = () => {\r\n    dispatch(skillsactions.fetchAll());\r\n  };\r\n  useEffect(() => {\r\n    getSkillsList();\r\n  }, []);\r\n  const skillsState = useSelector((state) => state.skillsReducer.list);\r\n  const getProjectList = () => {\r\n    dispatch(actions.fetchAll());\r\n  };\r\n  useEffect(() => {\r\n    getProjectList();\r\n  }, [assignProjectState]);\r\n  const projectState = useSelector((state) => state.projectReducer.list);\r\n\r\n  const [searchResult, setSearchResult] = useState([...projectState]);\r\n  useEffect(() => {\r\n    setSearchResult([...projectState]);\r\n  }, []);\r\n  useEffect(() => {\r\n    let dataAfterFilter = searchInput\r\n      ? projectState.filter(\r\n          (x) =>\r\n            x.name.toLowerCase().includes(searchInput.toLowerCase()) ||\r\n            x.code.toLowerCase().includes(searchInput.toLowerCase()) ||\r\n            x.startDate.toLowerCase().includes(searchInput.toLowerCase()) ||\r\n            x.endDate.toLowerCase().includes(searchInput.toLowerCase())\r\n        )\r\n      : projectState;\r\n    for (let i = 0; i < dataAfterFilter.length; i++) {\r\n      dataAfterFilter[i].startDate = new Date(\r\n        dataAfterFilter[i].startDate\r\n      ).toLocaleDateString();\r\n      dataAfterFilter[i].endDate = new Date(\r\n        dataAfterFilter[i].endDate\r\n      ).toLocaleDateString();\r\n    }\r\n    setSearchResult(dataAfterFilter);\r\n  }, [searchInput, projectState]);\r\n  const openInPopup = (item) => {\r\n    setRecordForEdit(item);\r\n    setOpenPopup(true);\r\n  };\r\n  const onDelete = (id) => {\r\n    setConfirmDialog({\r\n      ...confirmDialog,\r\n      isOpen: false,\r\n    });\r\n    dispatch(\r\n      actions.Delete(id, () =>\r\n        addToast('Deleted Successfully', { appearance: 'info' })\r\n      )\r\n    );\r\n  };\r\n  const actionColumn = {\r\n    title: 'Actions',\r\n    dataIndex: '',\r\n    key: 'actions',\r\n    render: (project) => (\r\n      <ButtonGroup variant=\"text\">\r\n        <Tooltip title=\"Edit\">\r\n          <IconButton\r\n            aria-label=\"edit\"\r\n            onClick={() => {\r\n              setAssignEmployee(false);\r\n              openInPopup(project);\r\n            }}\r\n          >\r\n            <EditIcon color=\"primary\" />\r\n          </IconButton>\r\n        </Tooltip>\r\n        <Tooltip title=\"Delete\">\r\n          <IconButton aria-label=\"delete\">\r\n            <DeleteIcon\r\n              color=\"secondary\"\r\n              onClick={() => {\r\n                setConfirmDialog({\r\n                  isOpen: true,\r\n                  title: 'Are you sure to delete project?',\r\n                  subTitle: \"You can't undo this operation\",\r\n                  onConfirm: () => {\r\n                    onDelete(project.id);\r\n                  },\r\n                });\r\n              }}\r\n            />\r\n          </IconButton>\r\n        </Tooltip>\r\n        <Tooltip title=\"Assign Employees\">\r\n          <IconButton aria-label=\"viewEmployees\">\r\n            <ViewListIcon\r\n              color=\"default\"\r\n              onClick={() => {\r\n                setAssignEmployee(true);\r\n                openInPopup(project);\r\n              }}\r\n            />\r\n          </IconButton>\r\n        </Tooltip>\r\n      </ButtonGroup>\r\n    ),\r\n  };\r\n  const columns = [...tableHeadersProject, actionColumn];\r\n  return (\r\n    <>\r\n      <div className=\"row d-flex justify-content-between\">\r\n        <div>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            size=\"small\"\r\n            className=\"ml-3 mt-2\"\r\n            style={{\r\n              height: '56px',\r\n              width: '100%',\r\n              backgroundColor: '#001529',\r\n            }}\r\n            onClick={() => {\r\n              setOpenPopup(true);\r\n              setRecordForEdit(null);\r\n            }}\r\n          >\r\n            <UserAddOutlined\r\n              style={{\r\n                fontSize: '22px',\r\n              }}\r\n            />\r\n            <span style={{ fontSize: '15px' }} className=\"ml-2\">\r\n              Add Project\r\n            </span>\r\n          </Button>\r\n        </div>\r\n        <div className=\"d-flex mt-2 mt-md-0\">\r\n          <div style={{ width: '100%' }} className=\"ml-2 mt-1 ml-md-0 mt-md-0\">\r\n            <Toolbar className=\"mt-1 pr-3\">\r\n              <TextField\r\n                fullWidth\r\n                label=\"Search(Name,Code,StartDate,ReleaseDate)\"\r\n                variant=\"outlined\"\r\n                InputProps={{\r\n                  startAdornment: (\r\n                    <InputAdornment position=\"start\">\r\n                      <Search />\r\n                    </InputAdornment>\r\n                  ),\r\n                }}\r\n                onChange={(e) => {\r\n                  setSearchInput(e.target.value);\r\n                }}\r\n              />\r\n            </Toolbar>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"border\">\r\n        <Table\r\n          columns={columns}\r\n          dataSource={searchResult}\r\n          pagination={{\r\n            defaultPageSize: 5,\r\n            showSizeChanger: true,\r\n            pageSizeOptions: ['5', '10', '15'],\r\n            showQuickJumper: true,\r\n          }}\r\n          className=\"table-responsive\"\r\n        />\r\n      </div>\r\n\r\n      <Popup\r\n        title={assignEmployee ? 'Assign Employee' : 'Project Form'}\r\n        openPopup={openPopup}\r\n        setOpenPopup={setOpenPopup}\r\n      >\r\n        {assignEmployee ? (\r\n          <AssignEmployeeToProject\r\n            recordForEdit={recordForEdit}\r\n            setOpenPopup={setOpenPopup}\r\n            employeeState={employeeState}\r\n          />\r\n        ) : (\r\n          <ProjectForm\r\n            recordForEdit={recordForEdit}\r\n            setOpenPopup={setOpenPopup}\r\n            skillsState={skillsState}\r\n          />\r\n        )}\r\n      </Popup>\r\n      <ConfirmDialog\r\n        confirmDialog={confirmDialog}\r\n        setConfirmDialog={setConfirmDialog}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Project;\r\n","D:\\Practice\\PMS\\pms-react-redux\\src\\App.js",["167","168"],"import Employee from './components/Employee/Employee.jsx';\nimport Project from './components/Project/Project';\nimport Navingation from './components/Shared/Navigation.jsx';\nimport { Provider } from 'react-redux';\nimport { store } from './actions/store';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'antd/dist/antd.css';\nimport { ToastProvider } from 'react-toast-notifications';\n\nconst App = () => {\n  return (\n    <>\n      <Provider store={store}>\n        <ToastProvider autoDismiss={true}>\n          <Navingation />\n        </ToastProvider>\n      </Provider>\n    </>\n  );\n};\n\nexport default App;\n",["169","170"],"D:\\Practice\\PMS\\pms-react-redux\\src\\components\\Shared\\Navigation.jsx",["171","172"],"import React from 'react';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n  Link,\r\n  NavLink,\r\n} from 'react-router-dom';\r\nimport { Layout, Menu } from 'antd';\r\nimport Employee from '../Employee/Employee';\r\nimport Dashboard from '../Shared/Dashboard';\r\nimport Project from '../Project/Project';\r\nimport { HomeOutlined, ProjectOutlined, TeamOutlined } from '@ant-design/icons';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport PMS_logo from '../../assets/images/pms_new_logo.png';\r\n\r\nconst { Header, Content, Footer, Sider } = Layout;\r\nconst Navingation = () => {\r\n  return (\r\n    <div>\r\n      <Router>\r\n        <Layout style={{ minHeight: '100vh' }}>\r\n          <Sider collapsible>\r\n            <div className=\"logo\" />\r\n            <Menu\r\n              theme=\"dark\"\r\n              defaultSelectedKeys={['1']}\r\n              mode=\"inline\"\r\n              className=\"mt-5 pt-2\"\r\n            >\r\n              <br></br>\r\n              <Menu.Item\r\n                key=\"1\"\r\n                className=\"mt-2\"\r\n                icon={<HomeOutlined style={{ fontSize: '20px' }} />}\r\n              >\r\n                Dashboard\r\n                <NavLink to=\"/\" />\r\n              </Menu.Item>\r\n              <Menu.Item\r\n                key=\"2\"\r\n                icon={<TeamOutlined style={{ fontSize: '20px' }} />}\r\n              >\r\n                <span>Employee</span>\r\n                <NavLink to=\"/employee\" />\r\n              </Menu.Item>\r\n              <Menu.Item\r\n                key=\"3\"\r\n                icon={<ProjectOutlined style={{ fontSize: '20px' }} />}\r\n              >\r\n                <span>Project</span>\r\n                <NavLink to=\"/project\" />\r\n              </Menu.Item>\r\n            </Menu>\r\n          </Sider>\r\n          <Layout>\r\n            <Header\r\n              className=\"site-layout-background d-flex justify-content-between\"\r\n              style={{ padding: 0, color: 'white' }}\r\n            >\r\n              <NavLink to=\"/\">\r\n                <h4 className=\"text-light\">\r\n                  {/* PMS */}\r\n                  <img style={{ height: '46px' }} src={PMS_logo} />\r\n                  {/* <hr className=\"text-light bg-light p-0 m-1\" /> */}\r\n                  <div\r\n                    style={{ fontSize: '9px', backgroundColor: 'white' }}\r\n                    className=\"text-dark py-1\"\r\n                  >\r\n                    Project Management System\r\n                  </div>\r\n                </h4>\r\n              </NavLink>\r\n              <div className=\"text-light mr-4 \">\r\n                <div className=\"d-flex\">\r\n                  <div className=\"m-2 pt-1\">\r\n                    <Avatar sizes=\"sm\">S</Avatar>\r\n                  </div>\r\n                  <div className=\"mb-1\">Shrutam</div>\r\n                </div>\r\n              </div>\r\n            </Header>\r\n\r\n            <Content\r\n              style={{\r\n                margin: '24px 16px',\r\n                padding: 24,\r\n                background: '#f4f5fd',\r\n                minHeight: 280,\r\n              }}\r\n            >\r\n              <Route exact path=\"/\" component={Dashboard} />\r\n              <Route exact path=\"/employee\" component={Employee} />\r\n              <Route path=\"/project\" component={Project} />\r\n            </Content>\r\n            <Footer style={{ textAlign: 'center' }}></Footer>\r\n          </Layout>\r\n        </Layout>\r\n      </Router>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Navingation;\r\n",["173","174"],"D:\\Practice\\PMS\\pms-react-redux\\src\\actions\\store.jsx",[],"D:\\Practice\\PMS\\pms-react-redux\\src\\components\\Shared\\Dashboard.jsx",["175","176","177","178","179","180","181","182","183","184","185","186","187","188","189"],"import React, { useEffect, useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport { Card, CardContent, Typography } from '@material-ui/core';\r\nimport '../../index.css';\r\nimport Select from 'react-select';\r\nimport {\r\n  yearList,\r\n  options,\r\n  optionsForSkillwise,\r\n  monthList,\r\n} from '../../utils/data';\r\nimport * as skillsactions from '../../actions/skills';\r\nimport * as employeeSkillactions from '../../actions/employeeSkill';\r\nimport * as projectTechactions from '../../actions/projectTech';\r\nimport * as employeeActions from '../../actions/employee';\r\nimport * as projectActions from '../../actions/project';\r\nimport moment from 'moment';\r\n\r\nconst Dashboard = () => {\r\n  const dispatch = useDispatch();\r\n  const [year, setYear] = useState(2020);\r\n  const [yearForProject, setYearForProject] = useState(2020);\r\n\r\n  // Skills State\r\n  const getSkillsList = () => {\r\n    dispatch(skillsactions.fetchAll());\r\n  };\r\n  useEffect(() => {\r\n    getSkillsList();\r\n  }, []);\r\n  const skillsState = useSelector((state) => state.skillsReducer.list);\r\n\r\n  // EmployeeWiseSkills State\r\n  const getEmployeeWiseSkillList = () => {\r\n    dispatch(employeeSkillactions.fetchAll());\r\n  };\r\n  useEffect(() => {\r\n    getEmployeeWiseSkillList();\r\n  }, []);\r\n  const employeeWiseSkillState = useSelector(\r\n    (state) => state.employeeSkillReducer.list\r\n  );\r\n\r\n  // TechWiseProject State\r\n  const getTechWiseProjectList = () => {\r\n    dispatch(projectTechactions.fetchAll());\r\n  };\r\n  useEffect(() => {\r\n    getTechWiseProjectList();\r\n  }, []);\r\n  const techWiseProjectState = useSelector(\r\n    (state) => state.projectTechReducer.list\r\n  );\r\n\r\n  //Employee State\r\n  const getEmployeeList = () => {\r\n    dispatch(employeeActions.fetchAll());\r\n  };\r\n  useEffect(() => {\r\n    getEmployeeList();\r\n  }, []);\r\n  const employeeState = useSelector((state) => state.employeeReducer.list);\r\n  //Project State\r\n  const getProjectList = () => {\r\n    dispatch(projectActions.fetchAll());\r\n  };\r\n  useEffect(() => {\r\n    getProjectList();\r\n  }, []);\r\n  const projectState = useSelector((state) => state.projectReducer.list);\r\n\r\n  const skilllist = skillsState.map((data, index) => {\r\n    return data.name;\r\n  });\r\n\r\n  let skillWiseEmployee = [];\r\n  let techWiseProjects = [];\r\n  for (let i = 1; i <= skillsState.length + 1; ++i) {\r\n    const skillWiseEmployeeCount = employeeWiseSkillState.filter(\r\n      (x) => x.skillId == i\r\n    );\r\n    skillWiseEmployee.push(skillWiseEmployeeCount);\r\n    const techWiseEmployeeCount = techWiseProjectState.filter(\r\n      (x) => x.skillId == i\r\n    );\r\n    techWiseProjects.push(techWiseEmployeeCount);\r\n  }\r\n  //Filtering of Employees by joining month and year\r\n  let employeesJoined = [];\r\n  for (let i = 1; i <= employeeState.length + 1; ++i) {\r\n    const yearWiseEmployeeCount = employeeState.filter(\r\n      (x) => moment(x.startDate).format('YYYY') == year\r\n    );\r\n    const monthWiseEmployeeCount = yearWiseEmployeeCount.filter(\r\n      (x) => moment(x.startDate).format('MM') == i\r\n    );\r\n    employeesJoined.push(monthWiseEmployeeCount);\r\n  }\r\n  //Filtering of Employees by Releasing month and year\r\n  let employeesReleased = [];\r\n  for (let i = 1; i <= employeeState.length + 1; ++i) {\r\n    const yearWiseEmployeeCount = employeeState.filter(\r\n      (x) => moment(x.releaseDate).format('YYYY') == year\r\n    );\r\n    const monthWiseEmployeeCount = yearWiseEmployeeCount.filter(\r\n      (x) => moment(x.releaseDate).format('MM') == i\r\n    );\r\n    employeesReleased.push(monthWiseEmployeeCount);\r\n  }\r\n  //Filtering of Projects by starting month and year\r\n  let projectsStarted = [];\r\n  for (let i = 1; i <= projectState.length + 1; ++i) {\r\n    const yearWiseProjectStartedCount = projectState.filter(\r\n      (x) => moment(x.startDate).format('YYYY') == yearForProject\r\n    );\r\n    const monthWiseProjectStartedCount = yearWiseProjectStartedCount.filter(\r\n      (x) => moment(x.startDate).format('MM') == i\r\n    );\r\n    projectsStarted.push(monthWiseProjectStartedCount);\r\n  }\r\n  //Filtering of Projects by ending month and year\r\n  let projectEnded = [];\r\n  for (let i = 1; i <= employeeState.length + 1; ++i) {\r\n    const yearWiseProjectEndedCount = projectState.filter(\r\n      (x) => moment(x.endDate).format('YYYY') == yearForProject\r\n    );\r\n    const monthWiseProjectEndedCount = yearWiseProjectEndedCount.filter(\r\n      (x) => moment(x.endDate).format('MM') == i\r\n    );\r\n    projectEnded.push(monthWiseProjectEndedCount);\r\n  }\r\n  //SkillWiseEmployee\r\n  const finalSkillWiseEmployyeArray = skillWiseEmployee.map((data, id) => {\r\n    let newCount = data.length;\r\n    return {\r\n      Count: newCount,\r\n    };\r\n  });\r\n  const filteredSkillWiseEmployeeArray = finalSkillWiseEmployyeArray.filter(\r\n    (x) => x.Count > 0\r\n  );\r\n\r\n  //TechWiseProject\r\n  const finalTechWiseProjectArray = techWiseProjects.map((data, id) => {\r\n    let newCount = data.length;\r\n    return {\r\n      Count: newCount,\r\n    };\r\n  });\r\n  const filteredTechWiseProjectArray = finalTechWiseProjectArray.filter(\r\n    (x) => x.Count > 0\r\n  );\r\n\r\n  //MonthWiseEmployeeJoined\r\n  const finalMonthWiseEmployeeJoinedArray = employeesJoined.map((data, id) => {\r\n    return {\r\n      Count: data.length,\r\n    };\r\n  });\r\n\r\n  //MonthWiseEmployeeReleased\r\n  const finalMonthWiseEmployeeReleasedArray = employeesReleased.map(\r\n    (data, id) => {\r\n      return {\r\n        Count: data.length,\r\n      };\r\n    }\r\n  );\r\n\r\n  //MonthWiseProjectStarted\r\n  const finalMonthWiseProjectStartedArray = projectsStarted.map((data, id) => {\r\n    return {\r\n      Count: data.length,\r\n    };\r\n  });\r\n\r\n  //MonthWiseProjectEnded\r\n  const finalMonthWiseProjectEndedArray = projectEnded.map((data, id) => {\r\n    return {\r\n      Count: data.length,\r\n    };\r\n  });\r\n\r\n  //dataSets For SkillWiseEmployeeChart\r\n  const dataSetsForSkillWiseEmployeeChart = {\r\n    labels: skilllist,\r\n    datasets: [\r\n      {\r\n        label: 'Skillwise Employee',\r\n        data: filteredSkillWiseEmployeeArray.map((data) => {\r\n          return data.Count;\r\n        }),\r\n        borderColor: 'rgba(255, 206, 86, 1.2)',\r\n        backgroundColor: 'rgba(255, 206, 86, 1.2)',\r\n      },\r\n    ],\r\n  };\r\n  // dataSets For TechWise ProjectChart\r\n  const dataSetsForTechWiseProjectChart = {\r\n    labels: skilllist,\r\n    datasets: [\r\n      {\r\n        label: 'Technologywise Project',\r\n        data: filteredTechWiseProjectArray.map((data) => {\r\n          return data.Count;\r\n        }),\r\n        borderColor: 'rgba(54, 162, 235,0.8)',\r\n        backgroundColor: 'rgba(54, 162, 235,0.8)',\r\n      },\r\n    ],\r\n  };\r\n  // dataSets For MonthWise EmployeeChart\r\n  const dataSetsForMonthWiseEmployeeChart = {\r\n    labels: monthList,\r\n    datasets: [\r\n      {\r\n        label: 'Employee Joined',\r\n        data: finalMonthWiseEmployeeJoinedArray.map((data) => {\r\n          return data.Count;\r\n        }),\r\n        borderColor: 'rgba(255, 206, 86, 0.4)',\r\n        backgroundColor: 'rgba(255, 206, 86, 1.2)',\r\n      },\r\n      {\r\n        label: 'Employee Released',\r\n        data: finalMonthWiseEmployeeReleasedArray.map((data) => {\r\n          return data.Count;\r\n        }),\r\n        borderColor: 'rgba(54, 162, 235,0.8)',\r\n        backgroundColor: 'rgba(54, 162, 235,0.8)',\r\n      },\r\n    ],\r\n  };\r\n  // dataSets For MonthWise ProjectChart\r\n  const dataSetsForMonthWiseProjectChart = {\r\n    labels: monthList,\r\n    datasets: [\r\n      {\r\n        label: 'Project Started',\r\n        data: finalMonthWiseProjectStartedArray.map((data) => {\r\n          return data.Count;\r\n        }),\r\n        borderColor: 'rgba(255, 206, 86, 0.4)',\r\n        backgroundColor: 'rgba(255, 206, 86, 1.2)',\r\n      },\r\n      {\r\n        label: 'Project Ended',\r\n        data: finalMonthWiseProjectEndedArray.map((data) => {\r\n          return data.Count;\r\n        }),\r\n        borderColor: 'rgba(54, 162, 235,0.8)',\r\n        backgroundColor: 'rgba(54, 162, 235,0.8)',\r\n      },\r\n    ],\r\n  };\r\n  const handleChange = (selectedOption) => {\r\n    setYear(selectedOption.value);\r\n  };\r\n  const handleChangeForProject = (selectedOption) => {\r\n    setYearForProject(selectedOption.value);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"row\">\r\n        <div className=\"col-md-6 col-sm-12\">\r\n          <Card className=\"pt-0\">\r\n            <div className=\"text-light text-center card-header-chart p-2\">\r\n              Employee\r\n              <div className=\"mt-1 text-left text-dark\">\r\n                <Select\r\n                  name=\"SelectedSkillList\"\r\n                  options={yearList}\r\n                  className=\"basic-multi-select\"\r\n                  classNamePrefix=\"select\"\r\n                  onChange={handleChange}\r\n                  defaultValue={{ value: 2020, label: '2020' }}\r\n                />\r\n              </div>\r\n            </div>\r\n            <CardContent className=\"pt-0\">\r\n              <Typography>\r\n                <Bar\r\n                  data={dataSetsForMonthWiseEmployeeChart}\r\n                  options={options}\r\n                />\r\n              </Typography>\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n        <div className=\"col-md-6 col-sm-12\">\r\n          <Card>\r\n            <div className=\"text-light text-center card-header-chart p-2\">\r\n              Project\r\n              <div className=\"mt-1 text-left text-dark\">\r\n                <Select\r\n                  name=\"SelectedSkillList\"\r\n                  options={yearList}\r\n                  className=\"basic-multi-select\"\r\n                  classNamePrefix=\"select\"\r\n                  onChange={handleChangeForProject}\r\n                  defaultValue={{ value: 2020, label: '2020' }}\r\n                />\r\n              </div>\r\n            </div>\r\n            <CardContent className=\"pt-0\">\r\n              <Typography>\r\n                <Bar\r\n                  data={dataSetsForMonthWiseProjectChart}\r\n                  options={options}\r\n                />\r\n              </Typography>\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n      </div>\r\n      <div className=\"row mt-4\">\r\n        <div className=\"col-md-6 col-sm-12\">\r\n          <Card>\r\n            <div className=\"text-light text-center card-header-chart p-2\">\r\n              Skillwise Employee\r\n            </div>\r\n            <CardContent className=\"pt-0\">\r\n              <Typography>\r\n                <Bar\r\n                  data={dataSetsForSkillWiseEmployeeChart}\r\n                  options={optionsForSkillwise}\r\n                />\r\n              </Typography>\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n        <div className=\"col-md-6 col-sm-12\">\r\n          <Card>\r\n            <div className=\"text-light text-center card-header-chart p-2\">\r\n              Technologywise Project\r\n            </div>\r\n            <CardContent className=\"pt-0\">\r\n              <Typography>\r\n                <Bar\r\n                  data={dataSetsForTechWiseProjectChart}\r\n                  options={optionsForSkillwise}\r\n                />\r\n              </Typography>\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n","D:\\Practice\\PMS\\pms-react-redux\\src\\utils\\constatnts.js",[],"D:\\Practice\\PMS\\pms-react-redux\\src\\actions\\api.jsx",["190"],"import axios from 'axios';\r\nimport { BASE_URL } from '../utils/constatnts';\r\n\r\nexport default {\r\n  actions(url = BASE_URL) {\r\n    return {\r\n      fetchAll: () => axios.get(url),\r\n      fetchById: (id) => axios.get(url + id),\r\n      create: (newRecord) => axios.post(url, newRecord),\r\n      update: (id, updateRecord) => axios.put(url + id, updateRecord),\r\n      delete: (id) => axios.delete(url + id),\r\n    };\r\n  },\r\n};\r\n",["191","192"],"D:\\Practice\\PMS\\pms-react-redux\\src\\actions\\employee.js",[],"D:\\Practice\\PMS\\pms-react-redux\\src\\actions\\project.js",[],["193","194"],"D:\\Practice\\PMS\\pms-react-redux\\src\\reducers\\project.js",[],"D:\\Practice\\PMS\\pms-react-redux\\src\\reducers\\combine.jsx",[],["195","196"],"D:\\Practice\\PMS\\pms-react-redux\\src\\components\\Employee\\EmployeeForm.jsx",["197","198","199","200","201"],"import React, { useState, useEffect } from 'react';\r\nimport { Form, Formik, yupToFormErrors } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport FormikControl from '../Shared/FormikControl';\r\nimport { Button } from '@material-ui/core';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport './employee.css';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\nimport * as actions from '../../actions/employee';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport Select from 'react-select';\r\nimport { useToasts } from 'react-toast-notifications';\r\n\r\nconst EmployeeForm = (props) => {\r\n  const { addToast } = useToasts();\r\n  const {\r\n    recordForEdit,\r\n    setOpenPopup,\r\n    skillsState,\r\n    getEmployeeList,\r\n    setRecordForEdit,\r\n  } = props;\r\n  const skilllist = skillsState.map((data, index) => {\r\n    return { value: data.id, label: data.name };\r\n  });\r\n\r\n  const dispatch = useDispatch();\r\n  const initialFieldValues = {\r\n    id: recordForEdit ? recordForEdit.id : 0,\r\n    name: recordForEdit ? recordForEdit.name : '',\r\n    code: recordForEdit ? recordForEdit.code : '',\r\n    startDate: recordForEdit\r\n      ? new Date(Date.parse(recordForEdit.startDate))\r\n      : new Date(),\r\n    releaseDate: recordForEdit\r\n      ? new Date(Date.parse(recordForEdit.releaseDate))\r\n      : new Date(),\r\n    SelectedSkillList: recordForEdit\r\n      ? recordForEdit.tblEmployeeSkill\r\n        ? recordForEdit.tblEmployeeSkill.map((data) => {\r\n            const record = skillsState.filter((x) => x.id == data.skillId);\r\n            return {\r\n              value: data.skillId,\r\n              label: record[0]?.name,\r\n            };\r\n          })\r\n        : recordForEdit.SelectedSkillList.map((data) => {\r\n            const record = skillsState.filter((x) => x.id == data);\r\n            return {\r\n              value: data,\r\n              label: record[0]?.name,\r\n            };\r\n          })\r\n      : [],\r\n  };\r\n\r\n  const [values, setValues] = useState(initialFieldValues);\r\n\r\n  //Validation\r\n  const validationSchema = Yup.object({\r\n    name: Yup.string()\r\n      .trim()\r\n      .required('This field is required')\r\n      .min(3, 'Mininum 3 characters allowed')\r\n      .max(15, 'Maximum 15 characters allowed'),\r\n    code: Yup.string().trim().required('This field is required'),\r\n  });\r\n\r\n  useEffect(() => {\r\n    var result = recordForEdit\r\n      ? recordForEdit.tblEmployeeSkill\r\n        ? recordForEdit.tblEmployeeSkill.map((data) => {\r\n            return data.skillId;\r\n          })\r\n        : recordForEdit.SelectedSkillList.map((data) => {\r\n            return data;\r\n          })\r\n      : [];\r\n    setValues({\r\n      ...values,\r\n      SelectedSkillList: result,\r\n    });\r\n  }, [recordForEdit]);\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setValues({\r\n      ...values,\r\n      [name]: value,\r\n    });\r\n  };\r\n  const onSelect = (data) => {\r\n    let newdata = data?.map((test) => {\r\n      return test.value;\r\n    });\r\n    setValues({\r\n      ...values,\r\n      SelectedSkillList: newdata,\r\n    });\r\n  };\r\n  const onRemove = (data) => {\r\n    setValues({\r\n      ...values,\r\n      SelectedSkillList: data,\r\n    });\r\n  };\r\n  //Submit Event\r\n  const onSubmit = (values) => {\r\n    if (recordForEdit == null) {\r\n      dispatch(\r\n        actions.create(\r\n          values,\r\n          addToast('Employee Added Successfully', { appearance: 'success' })\r\n        )\r\n      );\r\n      setOpenPopup(false);\r\n    } else {\r\n      dispatch(\r\n        actions.update(\r\n          recordForEdit.id,\r\n          values,\r\n          addToast('Employee Updated Successfully', { appearance: 'success' })\r\n        )\r\n      );\r\n      setOpenPopup(false);\r\n    }\r\n    setRecordForEdit(null);\r\n    getEmployeeList();\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"p-2\">\r\n        <div>\r\n          <Formik\r\n            initialValues={values}\r\n            validationSchema={validationSchema}\r\n            onSubmit={onSubmit}\r\n            enableReinitialize\r\n          >\r\n            {({ errors, touched, values }) => {\r\n              return (\r\n                <Form autoComplete=\"off\" noValidate>\r\n                  <div className=\"row\">\r\n                    <div className=\"col-sm-3 d-flex justify-content-sm-start justify-content-md-end pt-1 pr-0\">\r\n                      <label>\r\n                        Name<span className=\"text-danger\">*</span>\r\n                      </label>\r\n                    </div>\r\n                    <div className=\"col-sm-9\">\r\n                      <FormikControl\r\n                        control=\"input\"\r\n                        type=\"text\"\r\n                        name=\"name\"\r\n                        className={\r\n                          errors.name && touched.name ? 'err-field' : 'field'\r\n                        }\r\n                        onKeyDown={(e) =>\r\n                          e.keyCode > 48 && e.keyCode < 57 && e.preventDefault()\r\n                        }\r\n                        value={values?.name}\r\n                        onChange={handleInputChange}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"row mt-3\">\r\n                    <div className=\"col-sm-3 d-flex justify-content-sm-start justify-content-md-end pt-1 pr-0\">\r\n                      <label>\r\n                        Code<span className=\"text-danger\">*</span>\r\n                      </label>\r\n                    </div>\r\n                    <div className=\"col-sm-9\">\r\n                      <FormikControl\r\n                        control=\"input\"\r\n                        type=\"text\"\r\n                        name=\"code\"\r\n                        className={\r\n                          errors.code && touched.code ? 'err-field' : 'field'\r\n                        }\r\n                        value={values?.code}\r\n                        onChange={handleInputChange}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"row mt-3\">\r\n                    <div className=\"col-sm-3 d-flex justify-content-sm-start justify-content-md-end pt-1 pr-0\">\r\n                      <label>Skills</label>\r\n                    </div>\r\n                    <div className=\"col-sm-9\">\r\n                      <Select\r\n                        isMulti\r\n                        name=\"SelectedSkillList\"\r\n                        options={skilllist}\r\n                        className=\"basic-multi-select\"\r\n                        defaultValue={\r\n                          recordForEdit ? values.SelectedSkillList : ''\r\n                        }\r\n                        classNamePrefix=\"select\"\r\n                        onRemove={onRemove}\r\n                        onChange={onSelect}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"row mt-3\">\r\n                    <div className=\"col-sm-3 d-flex justify-content-sm-start justify-content-md-end pt-1 pr-0\">\r\n                      <label>Start Date</label>\r\n                    </div>\r\n                    <div className=\"col-sm-9\">\r\n                      <FormikControl\r\n                        control=\"date\"\r\n                        name=\"startDate\"\r\n                        className={\r\n                          errors.startDate && touched.startDate\r\n                            ? 'err-field'\r\n                            : 'field'\r\n                        }\r\n                        value={values?.startDate}\r\n                        // minDate={recordForEdit ? '' : new Date()}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"row mt-3\">\r\n                    <div className=\"col-sm-3 d-flex justify-content-sm-start justify-content-md-end pt-1 pr-0\">\r\n                      <label>Release Date</label>\r\n                    </div>\r\n                    <div className=\"col-sm-9\">\r\n                      <FormikControl\r\n                        control=\"date\"\r\n                        name=\"releaseDate\"\r\n                        className={\r\n                          errors.releaseDate && touched.releaseDate\r\n                            ? 'err-field'\r\n                            : 'field'\r\n                        }\r\n                        value={values?.releaseDate}\r\n                        // minDate={recordForEdit ? values?.startDate : new Date()}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"d-flex justify-content-end mt-3\">\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      startIcon={<SaveIcon />}\r\n                      style={{ padding: '6px 12px' }}\r\n                      className=\"btn-save\"\r\n                      type=\"submit\"\r\n                    >\r\n                      Save\r\n                    </Button>\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      startIcon={<CloseIcon />}\r\n                      className=\"btn-cancel ml-2\"\r\n                      style={{ padding: '6px 12px' }}\r\n                      onClick={() => {\r\n                        setOpenPopup(false);\r\n                      }}\r\n                    >\r\n                      Cancel\r\n                    </Button>\r\n                  </div>\r\n                </Form>\r\n              );\r\n            }}\r\n          </Formik>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EmployeeForm;\r\n","D:\\Practice\\PMS\\pms-react-redux\\src\\components\\Shared\\Popup.js",["202","203"],"import React from 'react';\nimport { Dialog, DialogContent, Button } from '@material-ui/core';\nimport CloseIcon from '@material-ui/icons/Close';\n\nexport default function Popup(props) {\n  const { title, children, openPopup, setOpenPopup } = props;\n  const [maxWidth, setMaxWidth] = React.useState('sm');\n  const [fullWidth, setFullWidth] = React.useState(true);\n\n  return (\n    <Dialog open={openPopup} maxWidth={maxWidth} fullWidth={fullWidth}>\n      <div className=\"pr-0 pl-3 py-3\">\n        <div className=\"d-flex justify-content-between\">\n          <div style={{ fontSize: '24px' }}>\n            <strong>{title}</strong>\n          </div>\n          <Button\n            onClick={() => {\n              setOpenPopup(false);\n            }}\n            style={{ outline: 'none', backgroundColor: 'white' }}\n          >\n            <CloseIcon\n              style={{\n                border: '1px solid lightgray',\n                borderRadius: '50%',\n                color: 'lightgray',\n              }}\n            />\n          </Button>\n        </div>\n        <hr\n          className=\"mx-1 p-0 mr-4 m-0\"\n          style={{ borderBottom: '4px solid #208fc8 ' }}\n        />\n      </div>\n      <DialogContent className=\"px-3\">{children}</DialogContent>\n    </Dialog>\n  );\n}\n","D:\\Practice\\PMS\\pms-react-redux\\src\\components\\Shared\\ConfirmDialog.js",[],"D:\\Practice\\PMS\\pms-react-redux\\src\\reducers\\employee.js",[],"D:\\Practice\\PMS\\pms-react-redux\\src\\components\\Shared\\TextError.jsx",[],"D:\\Practice\\PMS\\pms-react-redux\\src\\components\\Shared\\FormikControl.jsx",[],"D:\\Practice\\PMS\\pms-react-redux\\src\\components\\Shared\\DatePicker.jsx",[],"D:\\Practice\\PMS\\pms-react-redux\\src\\actions\\skills.js",[],"D:\\Practice\\PMS\\pms-react-redux\\src\\reducers\\skills.js",[],"D:\\Practice\\PMS\\pms-react-redux\\src\\components\\Shared\\Select.jsx",[],"D:\\Practice\\PMS\\pms-react-redux\\src\\components\\Project\\ProjectForm.jsx",["204","205","206","207"],"import React, { useState, useEffect } from 'react';\r\nimport { Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport FormikControl from '../Shared/FormikControl';\r\nimport { Button } from '@material-ui/core';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport '../Employee/employee.css';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\nimport * as actions from '../../actions/project';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport Select from 'react-select';\r\nimport { useToasts } from 'react-toast-notifications';\r\n\r\nconst ProjectForm = (props) => {\r\n  const { addToast } = useToasts();\r\n  const { recordForEdit, setOpenPopup, skillsState } = props;\r\n  const dispatch = useDispatch();\r\n\r\n  const skilllist = skillsState.map((data, index) => {\r\n    return { value: data.id, label: data.name };\r\n  });\r\n\r\n  const initialFieldValues = {\r\n    id: recordForEdit ? recordForEdit.id : 0,\r\n    name: recordForEdit ? recordForEdit.name : '',\r\n    code: recordForEdit ? recordForEdit.code : '',\r\n    startDate: recordForEdit\r\n      ? new Date(Date.parse(recordForEdit.startDate))\r\n      : new Date(),\r\n    endDate: recordForEdit\r\n      ? new Date(Date.parse(recordForEdit.endDate))\r\n      : new Date(),\r\n    SelectedSkillList: recordForEdit\r\n      ? recordForEdit.tblProjectTech\r\n        ? recordForEdit.tblProjectTech?.map((data) => {\r\n            const record = skillsState.filter((x) => x.id == data.skillId);\r\n            return {\r\n              value: data.skillId,\r\n              label: record[0]?.name,\r\n            };\r\n          })\r\n        : recordForEdit.SelectedSkillList.map((data) => {\r\n            const record = skillsState.filter((x) => x.id == data);\r\n            return {\r\n              value: data,\r\n              label: record[0]?.name,\r\n            };\r\n          })\r\n      : [],\r\n  };\r\n  const [values, setValues] = useState(initialFieldValues);\r\n  //Validation\r\n  const validationSchema = Yup.object({\r\n    name: Yup.string()\r\n      .trim()\r\n      .required('This field is required')\r\n      .min(3, 'Mininum 3 characters allowed')\r\n      .max(15, 'Maximum 15 characters allowed'),\r\n    code: Yup.string().trim().required('This field is required'),\r\n  });\r\n  useEffect(() => {\r\n    var result = recordForEdit\r\n      ? recordForEdit.tblProjectTech\r\n        ? recordForEdit.tblProjectTech.map((data) => {\r\n            return data.skillId;\r\n          })\r\n        : recordForEdit.SelectedSkillList.map((data) => {\r\n            return data;\r\n          })\r\n      : [];\r\n    setValues({\r\n      ...values,\r\n      SelectedSkillList: result,\r\n    });\r\n  }, [recordForEdit]);\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setValues({\r\n      ...values,\r\n      [name]: value,\r\n    });\r\n  };\r\n  const onSelect = (data) => {\r\n    let newdata = data?.map((test) => {\r\n      return test.value;\r\n    });\r\n    setValues({\r\n      ...values,\r\n      SelectedSkillList: newdata,\r\n    });\r\n  };\r\n\r\n  const onRemove = (data) => {\r\n    setValues({\r\n      ...values,\r\n      SelectedSkillList: data,\r\n    });\r\n  };\r\n  //Submit Event\r\n  const onSubmit = (values) => {\r\n    if (recordForEdit == null) {\r\n      dispatch(\r\n        actions.create(\r\n          values,\r\n          addToast('Project Added Successfully', { appearance: 'success' })\r\n        )\r\n      );\r\n      setOpenPopup(false);\r\n    } else {\r\n      dispatch(\r\n        actions.update(\r\n          recordForEdit.id,\r\n          values,\r\n          addToast('Project Updated Successfully', { appearance: 'success' })\r\n        )\r\n      );\r\n      setOpenPopup(false);\r\n    }\r\n  };\r\n  return (\r\n    <div>\r\n      <div className=\"p-2\">\r\n        <div>\r\n          <Formik\r\n            initialValues={values}\r\n            validationSchema={validationSchema}\r\n            onSubmit={onSubmit}\r\n            enableReinitialize\r\n          >\r\n            {({ errors, touched, values }) => {\r\n              return (\r\n                <Form autoComplete=\"off\" noValidate>\r\n                  <div className=\"row\">\r\n                    <div className=\"col-sm-3 d-flex justify-content-sm-start justify-content-md-end pt-1 pr-0\">\r\n                      <label>\r\n                        Name <span className=\"text-danger\">*</span>\r\n                      </label>\r\n                    </div>\r\n                    <div className=\"col-sm-9\">\r\n                      <FormikControl\r\n                        control=\"input\"\r\n                        type=\"text\"\r\n                        name=\"name\"\r\n                        className={\r\n                          errors.name && touched.name ? 'err-field' : 'field'\r\n                        }\r\n                        onKeyDown={(e) =>\r\n                          e.keyCode > 48 && e.keyCode < 57 && e.preventDefault()\r\n                        }\r\n                        value={values?.name}\r\n                        onChange={handleInputChange}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"row mt-3\">\r\n                    <div className=\"col-sm-3 d-flex justify-content-sm-start justify-content-md-end pt-1 pr-0\">\r\n                      <label>\r\n                        Code<span className=\"text-danger\">*</span>\r\n                      </label>\r\n                    </div>\r\n                    <div className=\"col-sm-9\">\r\n                      <FormikControl\r\n                        control=\"input\"\r\n                        type=\"text\"\r\n                        name=\"code\"\r\n                        className={\r\n                          errors.code && touched.code ? 'err-field' : 'field'\r\n                        }\r\n                        value={values?.code}\r\n                        onChange={handleInputChange}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"row mt-3\">\r\n                    <div className=\"col-sm-3 d-flex justify-content-sm-start justify-content-md-end pt-1 pr-0\">\r\n                      <label>Skills</label>\r\n                    </div>\r\n                    <div className=\"col-sm-9\">\r\n                      <Select\r\n                        isMulti\r\n                        name=\"SelectedSkillList\"\r\n                        options={skilllist}\r\n                        className=\"basic-multi-select\"\r\n                        classNamePrefix=\"select\"\r\n                        onRemove={onRemove}\r\n                        onChange={onSelect}\r\n                        defaultValue={\r\n                          recordForEdit ? values.SelectedSkillList : ''\r\n                        }\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"row mt-3\">\r\n                    <div className=\"col-sm-3 d-flex justify-content-sm-start justify-content-md-end pt-1 pr-0\">\r\n                      <label>Start Date</label>\r\n                    </div>\r\n                    <div className=\"col-sm-9\">\r\n                      <FormikControl\r\n                        control=\"date\"\r\n                        name=\"startDate\"\r\n                        className={\r\n                          errors.startDate && touched.startDate\r\n                            ? 'err-field'\r\n                            : 'field'\r\n                        }\r\n                        value={values?.startDate}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"row mt-3\">\r\n                    <div className=\"col-sm-3 d-flex justify-content-sm-start justify-content-md-end pt-1 pr-0\">\r\n                      <label>End Date</label>\r\n                    </div>\r\n                    <div className=\"col-sm-9\">\r\n                      <FormikControl\r\n                        control=\"date\"\r\n                        name=\"endDate\"\r\n                        className=\"field\"\r\n                        value={values?.endDate}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"d-flex justify-content-end mt-3\">\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      startIcon={<SaveIcon />}\r\n                      style={{ padding: '6px 12px' }}\r\n                      className=\"btn-save\"\r\n                      type=\"submit\"\r\n                    >\r\n                      Save\r\n                    </Button>\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      startIcon={<CloseIcon />}\r\n                      className=\"btn-cancel ml-2\"\r\n                      style={{ padding: '6px 12px' }}\r\n                      onClick={() => {\r\n                        setOpenPopup(false);\r\n                      }}\r\n                    >\r\n                      Cancel\r\n                    </Button>\r\n                  </div>\r\n                </Form>\r\n              );\r\n            }}\r\n          </Formik>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProjectForm;\r\n","D:\\Practice\\PMS\\pms-react-redux\\src\\utils\\data.js",[],"D:\\Practice\\PMS\\pms-react-redux\\src\\components\\Shared\\Input.jsx",[],"D:\\Practice\\PMS\\pms-react-redux\\src\\components\\Employee\\AssignProjectToEmployee.jsx",["208","209","210","211","212"],"import React, { useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Button } from '@material-ui/core';\r\nimport * as assignProjectActions from '../../actions/assignProject';\r\nimport { useToasts } from 'react-toast-notifications';\r\nimport './employee.css';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Select from 'react-select';\r\nimport { Form, Formik } from 'formik';\r\n\r\nconst AssignProjectToEmployee = (props) => {\r\n  const { recordForEdit, setOpenPopup, projectState } = props;\r\n  const { addToast } = useToasts();\r\n  const dispatch = useDispatch();\r\n  const [searchResult, setSearchResult] = useState([...projectState]);\r\n  const [searchInput, setSearchInput] = useState('');\r\n  const initialFieldValues = {\r\n    employeeId: recordForEdit ? recordForEdit.id : 0,\r\n    SelectedProjectList: recordForEdit\r\n      ? recordForEdit.tblAssignProject?.map((data) => {\r\n          const record = projectState.filter((x) => x.id == data.projectId);\r\n          return {\r\n            value: data.projectId,\r\n            label: record[0]?.name,\r\n          };\r\n        })\r\n      : [],\r\n  };\r\n  const [values, setValues] = useState(initialFieldValues);\r\n  useEffect(() => {\r\n    var result = recordForEdit\r\n      ? recordForEdit.tblAssignProject\r\n        ? recordForEdit.tblAssignProject.map((data) => {\r\n            return data.projectId;\r\n          })\r\n        : recordForEdit.SelectedProjectList.map((data) => {\r\n            return data;\r\n          })\r\n      : [];\r\n    setValues({\r\n      ...values,\r\n      SelectedProjectList: result,\r\n    });\r\n  }, [recordForEdit]);\r\n  useEffect(() => {\r\n    let dataAfterFilter = searchInput\r\n      ? projectState.filter((x) =>\r\n          x.name.toLowerCase().includes(searchInput.toLowerCase())\r\n        )\r\n      : projectState;\r\n    for (let i = 0; i < dataAfterFilter.length; i++) {\r\n      dataAfterFilter[i].startDate = new Date(\r\n        dataAfterFilter[i].startDate\r\n      ).toLocaleDateString();\r\n      dataAfterFilter[i].releaseDate = new Date(\r\n        dataAfterFilter[i].releaseDate\r\n      ).toLocaleDateString();\r\n    }\r\n    setSearchResult(dataAfterFilter);\r\n  }, [searchInput, projectState]);\r\n\r\n  const projectList = projectState.map((data, index) => {\r\n    return { value: data.id, label: data.name };\r\n  });\r\n\r\n  const onSelect = (data) => {\r\n    let newdata = data?.map((test) => {\r\n      return test.value;\r\n    });\r\n    setValues({\r\n      ...values,\r\n      SelectedProjectList: newdata,\r\n    });\r\n  };\r\n  const onRemove = (data) => {\r\n    setValues({\r\n      ...values,\r\n      SelectedProjectList: data,\r\n    });\r\n  };\r\n  //Submit Event\r\n  const onSubmit = (values) => {\r\n    dispatch(\r\n      assignProjectActions.create(\r\n        values,\r\n        addToast('Projects assigned Successfully', { appearance: 'success' })\r\n      )\r\n    );\r\n    setOpenPopup(false);\r\n  };\r\n  return (\r\n    <>\r\n      <div>\r\n        <div className=\"p-2\">\r\n          <div>\r\n            <Formik\r\n              initialValues={values}\r\n              onSubmit={onSubmit}\r\n              enableReinitialize\r\n            >\r\n              {({ values }) => {\r\n                return (\r\n                  <Form autoComplete=\"off\" noValidate>\r\n                    <div className=\"row\">\r\n                      <div className=\"col-sm-2 d-flex justify-content-sm-start justify-content-md-end pt-1 pr-0\">\r\n                        <label>Projects</label>\r\n                      </div>\r\n                      <div className=\"col-sm-10\">\r\n                        <Select\r\n                          isMulti\r\n                          name=\"SelectedProjectList\"\r\n                          options={projectList}\r\n                          className=\"basic-multi-select\"\r\n                          defaultValue={\r\n                            recordForEdit ? values.SelectedProjectList : ''\r\n                          }\r\n                          classNamePrefix=\"select\"\r\n                          onRemove={onRemove}\r\n                          onChange={onSelect}\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                    <div></div>\r\n                    <div className=\"d-flex justify-content-end mt-3\">\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        startIcon={<SaveIcon />}\r\n                        style={{ padding: '6px 12px' }}\r\n                        className=\"btn-save\"\r\n                        type=\"submit\"\r\n                      >\r\n                        Save\r\n                      </Button>\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        startIcon={<CloseIcon />}\r\n                        className=\"btn-cancel ml-2\"\r\n                        style={{ padding: '6px 12px' }}\r\n                        onClick={() => {\r\n                          setOpenPopup(false);\r\n                        }}\r\n                      >\r\n                        Cancel\r\n                      </Button>\r\n                    </div>\r\n                  </Form>\r\n                );\r\n              }}\r\n            </Formik>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AssignProjectToEmployee;\r\n","D:\\Practice\\PMS\\pms-react-redux\\src\\components\\Project\\AssignEmployeeToPRoject.jsx",["213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236"],"D:\\Practice\\PMS\\pms-react-redux\\src\\components\\Project\\AssignEmployeeToProject.jsx",["237","238","239","240","241"],"import React, { useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Button } from '@material-ui/core';\r\nimport * as assignProjectAction from '../../actions/assignProject';\r\nimport { useToasts } from 'react-toast-notifications';\r\nimport '../Employee/employee.css';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Select from 'react-select';\r\nimport { Form, Formik } from 'formik';\r\n\r\nconst AssignEmployeeToProject = (props) => {\r\n  const { recordForEdit, setOpenPopup, employeeState } = props;\r\n  const { addToast } = useToasts();\r\n  const dispatch = useDispatch();\r\n  const [searchResult, setSearchResult] = useState([...employeeState]);\r\n  const [searchInput, setSearchInput] = useState('');\r\n  const initialFieldValues = {\r\n    projectId: recordForEdit ? recordForEdit.id : 0,\r\n    SelectedEmployeeList: recordForEdit\r\n      ? recordForEdit.tblAssignProject.map((data) => {\r\n          const record = employeeState.filter((x) => x.id == data.employeeId);\r\n          return {\r\n            value: data.employeeId,\r\n            label: record[0]?.name,\r\n          };\r\n        })\r\n      : [],\r\n  };\r\n  const [values, setValues] = useState(initialFieldValues);\r\n  useEffect(() => {\r\n    var result = recordForEdit\r\n      ? recordForEdit.tblAssignProject\r\n        ? recordForEdit.tblAssignProject.map((data) => {\r\n            return data.employeeId;\r\n          })\r\n        : recordForEdit.SelectedEmployeeList.map((data) => {\r\n            return data;\r\n          })\r\n      : [];\r\n    setValues({\r\n      ...values,\r\n      SelectedEmployeeList: result,\r\n    });\r\n  }, [recordForEdit]);\r\n  useEffect(() => {\r\n    let dataAfterFilter = searchInput\r\n      ? employeeState.filter((x) =>\r\n          x.name.toLowerCase().includes(searchInput.toLowerCase())\r\n        )\r\n      : employeeState;\r\n    for (let i = 0; i < dataAfterFilter.length; i++) {\r\n      dataAfterFilter[i].startDate = new Date(\r\n        dataAfterFilter[i].startDate\r\n      ).toLocaleDateString();\r\n      dataAfterFilter[i].releaseDate = new Date(\r\n        dataAfterFilter[i].releaseDate\r\n      ).toLocaleDateString();\r\n    }\r\n    setSearchResult(dataAfterFilter);\r\n  }, [searchInput, employeeState]);\r\n\r\n  const projectList = employeeState.map((data, index) => {\r\n    return { value: data.id, label: data.name };\r\n  });\r\n\r\n  const onSelect = (data) => {\r\n    let newdata = data?.map((test) => {\r\n      return test.value;\r\n    });\r\n    setValues({\r\n      ...values,\r\n      SelectedEmployeeList: newdata,\r\n    });\r\n  };\r\n  const onRemove = (data) => {\r\n    setValues({\r\n      ...values,\r\n      SelectedEmployeeList: data,\r\n    });\r\n  };\r\n  //Submit Event\r\n  const onSubmit = (values) => {\r\n    dispatch(\r\n      assignProjectAction.create(\r\n        values,\r\n        addToast('Employees assigned Successfully', { appearance: 'success' })\r\n      )\r\n    );\r\n    setOpenPopup(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        <div className=\"p-2\">\r\n          <div>\r\n            <Formik\r\n              initialValues={values}\r\n              onSubmit={onSubmit}\r\n              enableReinitialize\r\n            >\r\n              {({ values }) => {\r\n                return (\r\n                  <Form autoComplete=\"off\" noValidate>\r\n                    <div className=\"row\">\r\n                      <div className=\"col-sm-2 d-flex justify-content-sm-start justify-content-md-end pt-1 pr-0\">\r\n                        <label>Projects</label>\r\n                      </div>\r\n                      <div className=\"col-sm-10\">\r\n                        <Select\r\n                          isMulti\r\n                          name=\"SelectedEmployeeList\"\r\n                          options={projectList}\r\n                          className=\"basic-multi-select\"\r\n                          defaultValue={\r\n                            recordForEdit ? values.SelectedEmployeeList : ''\r\n                          }\r\n                          classNamePrefix=\"select\"\r\n                          onRemove={onRemove}\r\n                          onChange={onSelect}\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                    <div></div>\r\n                    <div className=\"d-flex justify-content-end mt-3\">\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        startIcon={<SaveIcon />}\r\n                        style={{ padding: '6px 12px' }}\r\n                        className=\"btn-save\"\r\n                        type=\"submit\"\r\n                      >\r\n                        Save\r\n                      </Button>\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        startIcon={<CloseIcon />}\r\n                        className=\"btn-cancel ml-2\"\r\n                        style={{ padding: '6px 12px' }}\r\n                        onClick={() => {\r\n                          setOpenPopup(false);\r\n                        }}\r\n                      >\r\n                        Cancel\r\n                      </Button>\r\n                    </div>\r\n                  </Form>\r\n                );\r\n              }}\r\n            </Formik>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AssignEmployeeToProject;\r\n","D:\\Practice\\PMS\\pms-react-redux\\src\\reducers\\assignProject.js",[],"D:\\Practice\\PMS\\pms-react-redux\\src\\actions\\employeeSkill.js",[],"D:\\Practice\\PMS\\pms-react-redux\\src\\actions\\projectTech.js",[],"D:\\Practice\\PMS\\pms-react-redux\\src\\actions\\assignProject.js",[],{"ruleId":"242","severity":1,"message":"243","line":47,"column":6,"nodeType":"244","endLine":47,"endColumn":8,"suggestions":"245"},{"ruleId":"242","severity":1,"message":"246","line":56,"column":6,"nodeType":"244","endLine":56,"endColumn":8,"suggestions":"247"},{"ruleId":"242","severity":1,"message":"248","line":63,"column":6,"nodeType":"244","endLine":63,"endColumn":8,"suggestions":"249"},{"ruleId":"242","severity":1,"message":"250","line":70,"column":6,"nodeType":"244","endLine":70,"endColumn":26,"suggestions":"251"},{"ruleId":"252","replacedBy":"253"},{"ruleId":"254","replacedBy":"255"},{"ruleId":"256","severity":1,"message":"257","line":29,"column":8,"nodeType":"258","messageId":"259","endLine":29,"endColumn":14},{"ruleId":"242","severity":1,"message":"243","line":49,"column":6,"nodeType":"244","endLine":49,"endColumn":8,"suggestions":"260"},{"ruleId":"242","severity":1,"message":"250","line":58,"column":6,"nodeType":"244","endLine":58,"endColumn":8,"suggestions":"261"},{"ruleId":"242","severity":1,"message":"248","line":65,"column":6,"nodeType":"244","endLine":65,"endColumn":8,"suggestions":"262"},{"ruleId":"242","severity":1,"message":"246","line":72,"column":6,"nodeType":"244","endLine":72,"endColumn":26,"suggestions":"263"},{"ruleId":"242","severity":1,"message":"264","line":78,"column":6,"nodeType":"244","endLine":78,"endColumn":8,"suggestions":"265"},{"ruleId":"256","severity":1,"message":"266","line":1,"column":8,"nodeType":"258","messageId":"259","endLine":1,"endColumn":16},{"ruleId":"256","severity":1,"message":"267","line":2,"column":8,"nodeType":"258","messageId":"259","endLine":2,"endColumn":15},{"ruleId":"252","replacedBy":"268"},{"ruleId":"254","replacedBy":"269"},{"ruleId":"256","severity":1,"message":"270","line":5,"column":3,"nodeType":"258","messageId":"259","endLine":5,"endColumn":7},{"ruleId":"271","severity":1,"message":"272","line":63,"column":19,"nodeType":"273","endLine":63,"endColumn":68},{"ruleId":"252","replacedBy":"274"},{"ruleId":"254","replacedBy":"275"},{"ruleId":"242","severity":1,"message":"248","line":31,"column":6,"nodeType":"244","endLine":31,"endColumn":8,"suggestions":"276"},{"ruleId":"242","severity":1,"message":"277","line":40,"column":6,"nodeType":"244","endLine":40,"endColumn":8,"suggestions":"278"},{"ruleId":"242","severity":1,"message":"279","line":51,"column":6,"nodeType":"244","endLine":51,"endColumn":8,"suggestions":"280"},{"ruleId":"242","severity":1,"message":"250","line":62,"column":6,"nodeType":"244","endLine":62,"endColumn":8,"suggestions":"281"},{"ruleId":"242","severity":1,"message":"246","line":70,"column":6,"nodeType":"244","endLine":70,"endColumn":8,"suggestions":"282"},{"ruleId":"283","severity":1,"message":"284","line":81,"column":24,"nodeType":"285","messageId":"286","endLine":81,"endColumn":26},{"ruleId":"283","severity":1,"message":"284","line":85,"column":24,"nodeType":"285","messageId":"286","endLine":85,"endColumn":26},{"ruleId":"283","severity":1,"message":"284","line":93,"column":49,"nodeType":"285","messageId":"286","endLine":93,"endColumn":51},{"ruleId":"283","severity":1,"message":"284","line":96,"column":47,"nodeType":"285","messageId":"286","endLine":96,"endColumn":49},{"ruleId":"283","severity":1,"message":"284","line":104,"column":51,"nodeType":"285","messageId":"286","endLine":104,"endColumn":53},{"ruleId":"283","severity":1,"message":"284","line":107,"column":49,"nodeType":"285","messageId":"286","endLine":107,"endColumn":51},{"ruleId":"283","severity":1,"message":"284","line":115,"column":49,"nodeType":"285","messageId":"286","endLine":115,"endColumn":51},{"ruleId":"283","severity":1,"message":"284","line":118,"column":47,"nodeType":"285","messageId":"286","endLine":118,"endColumn":49},{"ruleId":"283","severity":1,"message":"284","line":126,"column":47,"nodeType":"285","messageId":"286","endLine":126,"endColumn":49},{"ruleId":"283","severity":1,"message":"284","line":129,"column":45,"nodeType":"285","messageId":"286","endLine":129,"endColumn":47},{"ruleId":"287","severity":1,"message":"288","line":4,"column":1,"nodeType":"289","endLine":14,"endColumn":3},{"ruleId":"252","replacedBy":"290"},{"ruleId":"254","replacedBy":"291"},{"ruleId":"252","replacedBy":"292"},{"ruleId":"254","replacedBy":"293"},{"ruleId":"252","replacedBy":"294"},{"ruleId":"254","replacedBy":"295"},{"ruleId":"256","severity":1,"message":"296","line":2,"column":24,"nodeType":"258","messageId":"259","endLine":2,"endColumn":39},{"ruleId":"256","severity":1,"message":"297","line":11,"column":10,"nodeType":"258","messageId":"259","endLine":11,"endColumn":21},{"ruleId":"283","severity":1,"message":"284","line":42,"column":59,"nodeType":"285","messageId":"286","endLine":42,"endColumn":61},{"ruleId":"283","severity":1,"message":"284","line":49,"column":59,"nodeType":"285","messageId":"286","endLine":49,"endColumn":61},{"ruleId":"242","severity":1,"message":"298","line":84,"column":6,"nodeType":"244","endLine":84,"endColumn":21,"suggestions":"299"},{"ruleId":"256","severity":1,"message":"300","line":7,"column":20,"nodeType":"258","messageId":"259","endLine":7,"endColumn":31},{"ruleId":"256","severity":1,"message":"301","line":8,"column":21,"nodeType":"258","messageId":"259","endLine":8,"endColumn":33},{"ruleId":"256","severity":1,"message":"297","line":11,"column":10,"nodeType":"258","messageId":"259","endLine":11,"endColumn":21},{"ruleId":"283","severity":1,"message":"284","line":37,"column":59,"nodeType":"285","messageId":"286","endLine":37,"endColumn":61},{"ruleId":"283","severity":1,"message":"284","line":44,"column":59,"nodeType":"285","messageId":"286","endLine":44,"endColumn":61},{"ruleId":"242","severity":1,"message":"298","line":76,"column":6,"nodeType":"244","endLine":76,"endColumn":21,"suggestions":"302"},{"ruleId":"256","severity":1,"message":"297","line":2,"column":10,"nodeType":"258","messageId":"259","endLine":2,"endColumn":21},{"ruleId":"256","severity":1,"message":"303","line":16,"column":10,"nodeType":"258","messageId":"259","endLine":16,"endColumn":22},{"ruleId":"256","severity":1,"message":"304","line":17,"column":23,"nodeType":"258","messageId":"259","endLine":17,"endColumn":37},{"ruleId":"283","severity":1,"message":"284","line":22,"column":58,"nodeType":"285","messageId":"286","endLine":22,"endColumn":60},{"ruleId":"242","severity":1,"message":"298","line":45,"column":6,"nodeType":"244","endLine":45,"endColumn":21,"suggestions":"305"},{"ruleId":"256","severity":1,"message":"297","line":2,"column":10,"nodeType":"258","messageId":"259","endLine":2,"endColumn":21},{"ruleId":"256","severity":1,"message":"306","line":7,"column":3,"nodeType":"258","messageId":"259","endLine":7,"endColumn":10},{"ruleId":"256","severity":1,"message":"307","line":8,"column":3,"nodeType":"258","messageId":"259","endLine":8,"endColumn":12},{"ruleId":"256","severity":1,"message":"308","line":9,"column":3,"nodeType":"258","messageId":"259","endLine":9,"endColumn":17},{"ruleId":"256","severity":1,"message":"309","line":11,"column":8,"nodeType":"258","messageId":"259","endLine":11,"endColumn":18},{"ruleId":"256","severity":1,"message":"310","line":12,"column":13,"nodeType":"258","messageId":"259","endLine":12,"endColumn":20},{"ruleId":"256","severity":1,"message":"311","line":13,"column":8,"nodeType":"258","messageId":"259","endLine":13,"endColumn":21},{"ruleId":"256","severity":1,"message":"312","line":15,"column":10,"nodeType":"258","messageId":"259","endLine":15,"endColumn":15},{"ruleId":"256","severity":1,"message":"313","line":19,"column":8,"nodeType":"258","messageId":"259","endLine":19,"endColumn":14},{"ruleId":"256","severity":1,"message":"303","line":26,"column":10,"nodeType":"258","messageId":"259","endLine":26,"endColumn":22},{"ruleId":"256","severity":1,"message":"304","line":27,"column":23,"nodeType":"258","messageId":"259","endLine":27,"endColumn":37},{"ruleId":"314","severity":2,"message":"315","line":33,"column":26,"nodeType":"258","messageId":"316","endLine":33,"endColumn":38},{"ruleId":"283","severity":1,"message":"284","line":33,"column":58,"nodeType":"285","messageId":"286","endLine":33,"endColumn":60},{"ruleId":"256","severity":1,"message":"317","line":43,"column":10,"nodeType":"258","messageId":"259","endLine":43,"endColumn":23},{"ruleId":"256","severity":1,"message":"318","line":100,"column":9,"nodeType":"258","messageId":"259","endLine":100,"endColumn":16},{"ruleId":"314","severity":2,"message":"315","line":101,"column":23,"nodeType":"258","messageId":"316","endLine":101,"endColumn":35},{"ruleId":"314","severity":2,"message":"319","line":124,"column":7,"nodeType":"258","messageId":"316","endLine":124,"endColumn":24},{"ruleId":"320","severity":2,"message":"321","line":170,"column":14,"nodeType":"322","endLine":170,"endColumn":20},{"ruleId":"320","severity":2,"message":"323","line":178,"column":20,"nodeType":"322","endLine":178,"endColumn":24},{"ruleId":"320","severity":2,"message":"324","line":184,"column":26,"nodeType":"322","endLine":184,"endColumn":32},{"ruleId":"320","severity":2,"message":"325","line":200,"column":24,"nodeType":"322","endLine":200,"endColumn":30},{"ruleId":"320","severity":2,"message":"326","line":203,"column":37,"nodeType":"322","endLine":203,"endColumn":45},{"ruleId":"320","severity":2,"message":"325","line":210,"column":24,"nodeType":"322","endLine":210,"endColumn":30},{"ruleId":"320","severity":2,"message":"327","line":213,"column":37,"nodeType":"322","endLine":213,"endColumn":46},{"ruleId":"256","severity":1,"message":"297","line":2,"column":10,"nodeType":"258","messageId":"259","endLine":2,"endColumn":21},{"ruleId":"256","severity":1,"message":"303","line":16,"column":10,"nodeType":"258","messageId":"259","endLine":16,"endColumn":22},{"ruleId":"256","severity":1,"message":"304","line":17,"column":23,"nodeType":"258","messageId":"259","endLine":17,"endColumn":37},{"ruleId":"283","severity":1,"message":"284","line":22,"column":59,"nodeType":"285","messageId":"286","endLine":22,"endColumn":61},{"ruleId":"242","severity":1,"message":"298","line":45,"column":6,"nodeType":"244","endLine":45,"endColumn":21,"suggestions":"328"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getAssignProject'. Either include it or remove the dependency array.","ArrayExpression",["329"],"React Hook useEffect has a missing dependency: 'getProjectList'. Either include it or remove the dependency array.",["330"],"React Hook useEffect has a missing dependency: 'getSkillsList'. Either include it or remove the dependency array.",["331"],"React Hook useEffect has a missing dependency: 'getEmployeeList'. Either include it or remove the dependency array.",["332"],"no-native-reassign",["333"],"no-negated-in-lhs",["334"],"no-unused-vars","'moment' is defined but never used.","Identifier","unusedVar",["335"],["336"],["337"],["338"],"React Hook useEffect has a missing dependency: 'projectState'. Either include it or remove the dependency array.",["339"],"'Employee' is defined but never used.","'Project' is defined but never used.",["333"],["334"],"'Link' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["333"],["334"],["340"],"React Hook useEffect has a missing dependency: 'getEmployeeWiseSkillList'. Either include it or remove the dependency array.",["341"],"React Hook useEffect has a missing dependency: 'getTechWiseProjectList'. Either include it or remove the dependency array.",["342"],["343"],["344"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration",["333"],["334"],["333"],["334"],["333"],["334"],"'yupToFormErrors' is defined but never used.","'useSelector' is defined but never used.","React Hook useEffect has a missing dependency: 'values'. Either include it or remove the dependency array. You can also do a functional update 'setValues(v => ...)' if you only need 'values' in the 'setValues' call.",["345"],"'setMaxWidth' is assigned a value but never used.","'setFullWidth' is assigned a value but never used.",["346"],"'searchResult' is assigned a value but never used.","'setSearchInput' is assigned a value but never used.",["347"],"'Toolbar' is defined but never used.","'TextField' is defined but never used.","'InputAdornment' is defined but never used.","'DeleteIcon' is defined but never used.","'actions' is defined but never used.","'ConfirmDialog' is defined but never used.","'Table' is defined but never used.","'Search' is defined but never used.","no-undef","'projectState' is not defined.","undef","'confirmDialog' is assigned a value but never used.","'columns' is assigned a value but never used.","'assignmentActions' is not defined.","react/jsx-no-undef","'Formik' is not defined.","JSXIdentifier","'Form' is not defined.","'Select' is not defined.","'Button' is not defined.","'SaveIcon' is not defined.","'CloseIcon' is not defined.",["348"],{"desc":"349","fix":"350"},{"desc":"351","fix":"352"},{"desc":"353","fix":"354"},{"desc":"355","fix":"356"},"no-global-assign","no-unsafe-negation",{"desc":"349","fix":"357"},{"desc":"358","fix":"359"},{"desc":"353","fix":"360"},{"desc":"361","fix":"362"},{"desc":"363","fix":"364"},{"desc":"353","fix":"365"},{"desc":"366","fix":"367"},{"desc":"368","fix":"369"},{"desc":"358","fix":"370"},{"desc":"351","fix":"371"},{"desc":"372","fix":"373"},{"desc":"372","fix":"374"},{"desc":"372","fix":"375"},{"desc":"372","fix":"376"},"Update the dependencies array to be: [getAssignProject]",{"range":"377","text":"378"},"Update the dependencies array to be: [getProjectList]",{"range":"379","text":"380"},"Update the dependencies array to be: [getSkillsList]",{"range":"381","text":"382"},"Update the dependencies array to be: [assignProjectState, getEmployeeList]",{"range":"383","text":"384"},{"range":"385","text":"378"},"Update the dependencies array to be: [getEmployeeList]",{"range":"386","text":"387"},{"range":"388","text":"382"},"Update the dependencies array to be: [assignProjectState, getProjectList]",{"range":"389","text":"390"},"Update the dependencies array to be: [projectState]",{"range":"391","text":"392"},{"range":"393","text":"382"},"Update the dependencies array to be: [getEmployeeWiseSkillList]",{"range":"394","text":"395"},"Update the dependencies array to be: [getTechWiseProjectList]",{"range":"396","text":"397"},{"range":"398","text":"387"},{"range":"399","text":"380"},"Update the dependencies array to be: [recordForEdit, values]",{"range":"400","text":"401"},{"range":"402","text":"401"},{"range":"403","text":"401"},{"range":"404","text":"401"},[1696,1698],"[getAssignProject]",[1930,1932],"[getProjectList]",[2139,2141],"[getSkillsList]",[2344,2364],"[assignProjectState, getEmployeeList]",[1751,1753],[1988,1990],"[getEmployeeList]",[2199,2201],[2402,2422],"[assignProjectState, getProjectList]",[2642,2644],"[projectState]",[1041,1043],[1310,1312],"[getEmployeeWiseSkillList]",[1598,1600],"[getTechWiseProjectList]",[1857,1859],[2090,2092],[2746,2761],"[recordForEdit, values]",[2654,2669],[1655,1670],[1671,1686]]